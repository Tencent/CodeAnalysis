# -*- coding: utf-8 -*-
# Copyright (c) 2021-2025 Tencent
#
# This source code file is made available under MIT License
# See LICENSE for details
# ==============================================================================

# Generated by Django 3.1.12 on 2021-11-15 01:23
"""
codelint数据迁移脚本
0001_initial
"""

import uuid

import django.db.models.manager
from django.db import migrations, models

import apps.base.basemodel


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('codeproj', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            # codelint_issue
            name='Issue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('creator', models.CharField(blank=True, max_length=128, null=True, verbose_name='创建人')),
                ('modifier', models.CharField(blank=True, max_length=128, null=True, verbose_name='最近修改人')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('deleter', models.CharField(blank=True, max_length=128, null=True, verbose_name='删除人')),
                ('g_issue_hash', models.CharField(blank=True, max_length=40, null=True, verbose_name='全局hash值')),
                ('issue_hash', models.CharField(max_length=40, unique=True, verbose_name='hash值')),
                ('o_issue_hash', models.CharField(blank=True, max_length=40, null=True, verbose_name='旧版hash值')),
                ('file_path', models.CharField(max_length=512, verbose_name='所属文件')),
                ('file_hash', models.CharField(max_length=40, null=True, verbose_name='所在文件hash值')),
                ('scm_url', models.CharField(max_length=512, verbose_name='子库代码库地址')),
                ('real_file_path', models.CharField(max_length=512, verbose_name='子库文件路径')),
                ('checkrule_gid', models.IntegerField(blank=True, null=True, verbose_name='规则id')),
                ('checkrule_real_name', models.CharField(max_length=254, verbose_name='工具使用名称')),
                ('checkrule_display_name',
                 models.CharField(blank=True, max_length=254, null=True, verbose_name='规则显示名称')),
                ('checkrule_rule_title', models.CharField(blank=True, max_length=254, null=True,
                                                          verbose_name='规则详情')),
                ('checktool_name', models.CharField(max_length=64, verbose_name='工具名称')),
                ('category', models.IntegerField(
                    choices=[(1, '功能'), (2, '安全'), (3, '性能'), (4, '可用性'), (5, '无障碍化'),
                             (6, '国际化'), (7, '代码风格'), (8, '其他')], default=8, verbose_name='规则类别')),
                ('msg', models.CharField(max_length=512, verbose_name='问题描述')),
                ('state', models.IntegerField(choices=[(1, '未处理'), (2, '已处理'), (3, '关闭')],
                                              db_index=True, verbose_name='状态')),
                ('resolution', models.IntegerField(blank=True,
                                                   choices=[(0, '无'), (1, '修复'), (2, '无须修复'), (3, '误报'),
                                                            (4, '重复单过滤'), (5, '路径过滤'), (6, '规则移除'),
                                                            (7, '历史问题'), (8, '注释忽略')],
                                                   null=True, verbose_name='解决方法')),
                ('author', models.CharField(max_length=256, null=True, verbose_name='责任人')),
                ('scan_revision', models.CharField(max_length=64, null=True, verbose_name='扫描版本号')),
                ('severity', models.IntegerField(choices=[(1, '致命'), (2, '错误'), (3, '警告'), (4, '提示')], default=4,
                                                 verbose_name='严重级别')),
                ('language', models.CharField(blank=True, max_length=64, null=True, verbose_name='文件所属的代码语言')),
                ('revision', models.CharField(blank=True, max_length=64, verbose_name='问题引入的版本号')),
                ('ci_time', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('file_owners', models.CharField(blank=True, max_length=256, null=True,
                                                 verbose_name="文件负责人，多个时使用英文分号';'分隔")),
                ('fixed_time', models.DateTimeField(null=True)),
                ('tapd_ws_id', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='tapd项目id')),
                ('tapd_bug_id', models.CharField(blank=True, db_index=True, max_length=32, null=True)),
                ('modified_time', models.DateTimeField(default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='codeproj.project')),
                ('scan_fix',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='scan_fix',
                                   to='codeproj.scan', verbose_name='关闭扫描')),
                ('scan_open',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='scan_open',
                                   to='codeproj.scan', verbose_name='发现扫描')),
            ],
            options={
                # codelint_issue表索引信息
                'index_together': {('project', 'checktool_name'), ('project', 'file_hash'), ('checkrule_gid', 'state'),
                                   ('project', 'state', 'ci_time'), ('checkrule_display_name', 'resolution'),
                                   ('project', 'state', 'severity', 'ci_time'), ('project', 'state', 'resolution'),
                                   ('id', 'project'), ('project', 'state', 'author'), ('project', 'ci_time')},
            },
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codelint_issuecomment
            name='IssueComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_id', models.IntegerField(verbose_name='issue编号，不使用外键，以防止被删除后无记录')),
                ('issue_hash',
                 models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='问题标记值')),
                ('action', models.CharField(max_length=128, verbose_name='执行操作')),
                ('message', models.CharField(blank=True, max_length=512, null=True, verbose_name='执行信息')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('creator', models.CharField(max_length=64, verbose_name='创建人')),
            ],
        ),
        migrations.CreateModel(
            # codelint_issuerefer
            name='IssueRefer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('creator', models.CharField(blank=True, max_length=128, null=True, verbose_name='创建人')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('modifier', models.CharField(blank=True, max_length=128, null=True, verbose_name='最近修改人')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('deleter', models.CharField(blank=True, max_length=128, null=True, verbose_name='删除人')),
                ('issuedetail_uuid', models.UUIDField(db_index=True, null=True, verbose_name='issuedetail uuid hex')),
                ('issue_hash', models.CharField(db_index=True, max_length=40, null=True, verbose_name='hash值')),
                ('file_path', models.CharField(max_length=512, verbose_name='产生issue的文件路径')),
                ('line', models.IntegerField(verbose_name='行号')),
                ('column', models.IntegerField(null=True, verbose_name='列号')),
                ('msg', models.CharField(max_length=512, verbose_name='问题描述')),
                ('seq', models.IntegerField(verbose_name='issue发生的原因序号')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codelint_wontfixissue
            name='WontFixIssue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('creator', models.CharField(blank=True, max_length=128, null=True, verbose_name='创建人')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('modifier', models.CharField(blank=True, max_length=128, null=True, verbose_name='最近修改人')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('deleter', models.CharField(blank=True, max_length=128, null=True, verbose_name='删除人')),
                ('issue_hash',
                 models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='问题标记值')),
                ('g_issue_hash', models.CharField(blank=True, max_length=128, null=True, verbose_name='全局hash值')),
                ('scope', models.IntegerField(default=1, verbose_name='影响范围，默认为项目级别')),
                ('ext_field', models.JSONField(blank=True, null=True, verbose_name='扩展字段')),
                ('issue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                            to='codelint.issue', verbose_name='关联issue')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              to='codeproj.project')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codelint_packagerulemap
            name='PackageRuleMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checkpackage_gid', models.IntegerField(verbose_name='规则包编号')),
                ('checkrule_gid', models.IntegerField(verbose_name='规则编号')),
            ],
            options={
                'unique_together': {('checkpackage_gid', 'checkrule_gid')},
            },
        ),
        migrations.CreateModel(
            # codelint_lintscan
            name='LintScan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_open_num', models.IntegerField(blank=True, null=True, verbose_name='新增缺陷数')),
                ('issue_fix_num', models.IntegerField(blank=True, null=True, verbose_name='修复缺陷数')),
                ('active_issue_num', models.IntegerField(blank=True, null=True, verbose_name='所有未解决的缺陷数量')),
                ('issue_detail_num', models.IntegerField(blank=True, null=True, verbose_name='问题详情数量')),
                ('author_num', models.IntegerField(blank=True, null=True, verbose_name='发现问题的人数')),
                ('active_severity_detail',
                 models.CharField(blank=True, max_length=512, null=True, verbose_name='严重级别详情')),
                (
                    'active_category_detail',
                    models.CharField(blank=True, max_length=512, null=True, verbose_name='类别详情')),
                ('total_state_detail', models.CharField(blank=True, max_length=512, null=True, verbose_name='状态详情')),
                ('total_severity_detail',
                 models.CharField(blank=True, max_length=512, null=True, verbose_name='严重级别详情')),
                ('total_category_detail', models.CharField(blank=True, max_length=512,
                                                           null=True, verbose_name='类别详情')),
                ('scan_summary', models.TextField(blank=True, null=True, verbose_name='本次扫描总结报告')),
                ('total_summary', models.TextField(blank=True, null=True, verbose_name='累计总结报告')),
                ('scan', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='codeproj.scan')),
            ],
        ),
        migrations.CreateModel(
            # codelint_issuedetail
            name='IssueDetail',
            fields=[
                ('creator', models.CharField(blank=True, max_length=128, null=True, verbose_name='创建人')),
                ('modifier', models.CharField(blank=True, max_length=128, null=True, verbose_name='最近修改人')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('deleter', models.CharField(blank=True, max_length=128, null=True, verbose_name='删除人')),
                ('issue_hash', models.CharField(db_index=True, max_length=40, null=True, verbose_name='hash值')),
                ('issuedetail_uuid',
                 models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('author', models.CharField(max_length=256, null=True, verbose_name='责任人')),
                ('line', models.IntegerField(verbose_name='行号')),
                ('column', models.IntegerField(blank=True, null=True, verbose_name='列号')),
                ('scan_revision', models.CharField(max_length=64, verbose_name='问题当前版本')),
                ('real_revision', models.CharField(max_length=64, verbose_name='问题代码子库版本')),
                ('is_latest', models.BooleanField(default=True, verbose_name='是否为最近一次扫描')),
                ('created_time', models.DateTimeField(default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('modified_time', models.DateTimeField(default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('issue',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='codelint.issue')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              to='codeproj.project')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codelint_invalidissue
            name='InvalidIssue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('creator', models.CharField(blank=True, max_length=128, null=True, verbose_name='创建人')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('modifier', models.CharField(blank=True, max_length=128, null=True, verbose_name='最近修改人')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('deleter', models.CharField(blank=True, max_length=128, null=True, verbose_name='删除人')),
                ('issue_hash',
                 models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='问题标记值')),
                ('g_issue_hash', models.CharField(blank=True, max_length=128, null=True, verbose_name='全局hash值')),
                ('scope', models.IntegerField(default=1, verbose_name='影响范围，默认为项目级别')),
                ('ext_field', models.JSONField(blank=True, null=True, verbose_name='扩展字段')),
                ('issue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                            to='codelint.issue', verbose_name='关联issue')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              to='codeproj.project')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codelint_checktoolscan
            name='CheckToolScan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='工具名称', max_length=64)),
                ('issue_open_num', models.IntegerField(blank=True, help_text='工具本次扫描新发现的问题数', null=True)),
                ('issue_fix_num', models.IntegerField(blank=True, help_text='工具本次扫描关闭的问题数', null=True)),
                ('active_severity_detail', models.TextField(blank=True,
                                                            help_text='本次工具新发现不同级别的问题数', null=True)),
                ('total_state_detail', models.TextField(blank=True, help_text='工具发现的问题状态详情', null=True)),
                ('total_severity_detail', models.TextField(blank=True,
                                                           help_text='本次工具发现不同级别的问题数', null=True)),
                ('author_issue_detail', models.TextField(blank=True, help_text='本次工具问题的负责人分布情况', null=True)),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                           to='codeproj.scan')),
            ],
            options={
                'unique_together': {('scan', 'name')},
            },
        ),
    ]
