# -*- coding: utf-8 -*-
# Copyright (c) 2021-2025 Tencent
#
# This source code file is made available under MIT License
# See LICENSE for details
# ==============================================================================

# Generated by Django 3.1.12 on 2021-11-29 11:34
"""
codeproj数据迁移脚本
0001_initial
"""
import django.db.models.manager
from django.conf import settings
from django.db import migrations, models

import apps.base.basemodel


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('scan_conf', '0001_initial'),
        ('authen', '0001_initial'),
        ('nodemgr', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            # codeproj_baseproject
            name='BaseProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('branch', models.CharField(help_text='关联分支', max_length=200)),
                ('status',
                 models.IntegerField(choices=[(1, '活跃'), (2, '失活'), (3, '关闭')], default=1, verbose_name='项目状态')),
                ('created_from', models.CharField(default='codedog_web', help_text='创建渠道', max_length=32)),
                ('scm_initial_revision', models.CharField(blank=True, help_text='起始版本号', max_length=64, null=True)),
                ('remark', models.TextField(blank=True, help_text='备注信息', null=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('deleter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='删除人')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', to=settings.AUTH_USER_MODEL,
                                               verbose_name='最近修改人')),
                ('refer_project', models.ForeignKey(blank=True, help_text='参照项目', null=True,
                                                    on_delete=django.db.models.deletion.SET_NULL,
                                                    to='codeproj.baseproject')),
            ],
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codeproj_baserepository
            name='BaseRepository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('name', models.CharField(help_text='所属产品名称', max_length=128, null=True, verbose_name='产品名称')),
                ('scm_url', models.CharField(max_length=200, verbose_name='代码库地址')),
                ('ssh_url', models.CharField(blank=True, max_length=256, null=True, verbose_name='代码库SSH格式地址')),
                ('scm_type',
                 models.CharField(choices=[('git', 'Git'), ('svn', 'SVN')], max_length=16, verbose_name='代码库类型')),
                ('created_from', models.CharField(default='codedog_web', max_length=32, verbose_name='创建渠道')),
                ('state', models.IntegerField(choices=[(1, '活跃'), (2, '失活')], default=1, verbose_name='代码库状态')),
                ('url_key', models.CharField(blank=True, max_length=128, null=True, verbose_name='代码库key值')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('deleter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='删除人')),
            ],
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codeproj_basescanscheme
            name='BaseScanScheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('name', models.CharField(help_text='扫描方案名称', max_length=128)),
                ('refer_template_ids', models.JSONField(blank=True, null=True, verbose_name='关联模板编号列表')),
                ('description', models.TextField(blank=True, help_text='详细描述', null=True)),
                ('default_flag', models.BooleanField(default=False, help_text='默认扫描方案标识，一个项目只能有一个默认方案')),
                ('created_from', models.CharField(default='web', help_text='创建渠道', max_length=32)),
                ('issue_global_ignore', models.BooleanField(default=True,
                                                            verbose_name='是否开启问题全局忽略，默认为True（开启）')),
                ('status', models.IntegerField(choices=[(1, '活跃'), (2, '废弃')], default=1, help_text='扫描方案状态')),
                ('scheme_key', models.CharField(blank=True, max_length=64, null=True, verbose_name='扫描方案key值')),
                ('scheme_type', models.IntegerField(blank=True, default=2, help_text='方案类型', null=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('deleter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='删除人')),
                ('languages',
                 models.ManyToManyField(help_text='勾选需要扫描的语言', to='scan_conf.Language', verbose_name='包含语言')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', to=settings.AUTH_USER_MODEL,
                                               verbose_name='最近修改人')),
                ('refer_scheme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                   to='codeproj.basescanscheme', verbose_name='参照扫描方案')),
                ('repo', models.ForeignKey(help_text='关联代码库', null=True,
                                           on_delete=django.db.models.deletion.SET_NULL,
                                           to='codeproj.baserepository')),
                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                          to='nodemgr.exectag', verbose_name='执行环境')),
            ],
            options={
                'unique_together': {('repo', 'name')},
            },
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codeproj_defaultscanpath
            name='DefaultScanPath',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('dir_path', models.CharField(help_text='过滤路径名称', max_length=255, unique=True)),
                ('path_type', models.IntegerField(blank=True, default=1,
                                                  help_text='路径格式类型，1为通配符，2为正则表达式，默认为通配符', null=True)),
                ('category', models.CharField(default='默认', help_text='过滤路径类别', max_length=20)),
                ('description', models.CharField(blank=True, help_text='路径描述', max_length=255, null=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('deleter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='删除人')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='最近修改人')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codeproj_scanschemetemplate
            name='ScanSchemeTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('name', models.CharField(help_text='扫描方案模版名称', max_length=128)),
                ('display_name', models.CharField(blank=True, help_text='扫描方案展示名称', max_length=128, null=True)),
                ('short_desc', models.CharField(blank=True, help_text='扫描方案模板简短描述', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='详细描述', null=True)),
                ('basic_conf', models.TextField(help_text='基础配置')),
                ('lint_conf', models.TextField(help_text='扫描配置')),
                ('metric_conf', models.TextField(help_text='度量配置')),
                ('public', models.BooleanField(default=False, help_text='是否开放')),
                ('hidden', models.BooleanField(default=False, help_text='是否隐藏')),
                ('recommend', models.BooleanField(default=False, help_text='是否推荐')),
                ('checkprofile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                   to='scan_conf.checkprofile', verbose_name='检测检测集')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('deleter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='删除人')),
                ('labels',
                 models.ManyToManyField(help_text='标签', related_name='label_schemetemplate', to='scan_conf.Label')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='最近修改人')),
                ('owners', models.ManyToManyField(help_text='负责人', related_name='own_schemetemplate',
                                                  to=settings.AUTH_USER_MODEL)),
                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                          to='nodemgr.exectag', verbose_name='执行环境')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codeproj_scanschemeperm
            name='ScanSchemePerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('edit_scope', models.IntegerField(choices=[(1, '公开'), (2, '私有')], default=1,
                                                   help_text='方案编辑权限范围')),
                ('execute_scope',
                 models.IntegerField(choices=[(1, '公开'), (2, '私有')], default=1, help_text='关联项目启动权限范围')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('deleter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='删除人')),
                ('edit_managers', models.ManyToManyField(blank=True, help_text='方案可编辑成员列表',
                                                         related_name='_scanschemeperm_edit_managers_+',
                                                         to=settings.AUTH_USER_MODEL)),
                ('execute_managers', models.ManyToManyField(blank=True, help_text='方案可执行成员列表',
                                                            related_name='_scanschemeperm_execute_managers_+',
                                                            to=settings.AUTH_USER_MODEL)),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='最近修改人')),
                ('scan_scheme', models.OneToOneField(help_text='扫描方案', on_delete=django.db.models.deletion.CASCADE,
                                                     to='codeproj.basescanscheme')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codeproj_scandir
            name='ScanDir',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dir_path', models.CharField(help_text='名称', max_length=512)),
                ('path_type', models.IntegerField(blank=True, choices=[(1, '通配符格式'), (2, '正则表达式格式')], default=1,
                                                  help_text='路径格式类型，1为通配符，2为正则表达式，默认为通配符', null=True)),
                ('scan_type',
                 models.IntegerField(choices=[(0, ''), (1, 'Include'), (2, 'Exclude')], default=0, help_text='扫描类型')),
                ('scan_scheme',
                 models.ForeignKey(help_text='扫描方案', null=True, on_delete=django.db.models.deletion.SET_NULL,
                                   to='codeproj.basescanscheme')),
            ],
        ),
        migrations.CreateModel(
            # codeproj_projectteam
            name='ProjectTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('name', models.SlugField(help_text='项目组名称', max_length=64)),
                ('display_name', models.CharField(help_text='展示名称', max_length=128)),
                ('description', models.TextField(blank=True, help_text='项目描述信息', null=True)),
                ('status', models.IntegerField(choices=[(1, '活跃'), (2, '失活')], default=1, help_text='项目团队状态')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('deleter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='删除人')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', to=settings.AUTH_USER_MODEL,
                                               verbose_name='最近修改人')),
                ('organization', models.ForeignKey(blank=True, help_text='所属组织', null=True,
                                                   on_delete=django.db.models.deletion.SET_NULL,
                                                   to='authen.organization')),
            ],
            options={
                'unique_together': {('organization', 'name')},
            },
            bases=(models.Model, apps.base.basemodel.BasePerm),
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codeproj_nonrepouser
            name='NonRepoUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('deleter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='删除人')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='最近修改人')),
                ('replace_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                   related_name='replace_username', to=settings.AUTH_USER_MODEL,
                                                   verbose_name='对接人')),
                ('repo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='codeproj.baserepository',
                                           verbose_name='代码库')),
                ('users', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codeproj_nonprojectuser
            name='NonProjectUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('deleter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='删除人')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='最近修改人')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='codeproj.baseproject',
                                              verbose_name='产品名称')),
                ('replace_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                   related_name='replace_user', to=settings.AUTH_USER_MODEL,
                                                   verbose_name='对接人')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL,
                                           verbose_name='用户')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codeproj_metricsetting
            name='MetricSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('codediff_scan_enabled', models.BooleanField(default=False, help_text='旧版代码统计开关，默认关闭')),
                ('cc_scan_enabled', models.BooleanField(default=False, help_text='圈复杂度开关，默认关闭')),
                ('min_ccn', models.IntegerField(default=20, help_text='圈复杂度检测最小值')),
                ('cc_ref_project_id', models.IntegerField(blank=True, help_text='参考阈值的项目编号', null=True)),
                ('cc_ref_setting_time', models.DateTimeField(blank=True, help_text='参考阈值设定的时间', null=True)),
                ('cc_ref_value_flag',
                 models.BooleanField(default=False, help_text='圈复杂度文件参考阈值标识位，如果设定了即为True，默认为False')),
                ('cc', models.CharField(blank=True, help_text='提单抄送人', max_length=16, null=True)),
                ('dup_scan_enabled', models.BooleanField(default=False, help_text='重复代码开关，默认关闭')),
                ('dup_block_length_min', models.IntegerField(default=120, help_text='重复代码长度最小值')),
                ('dup_block_length_max', models.IntegerField(blank=True, help_text='重复代码长度最大值', null=True)),
                ('dup_min_dup_times', models.IntegerField(default=2, help_text='重复最小次数')),
                ('dup_max_dup_times', models.IntegerField(blank=True, help_text='重复最大次数', null=True)),
                ('dup_min_midd_rate', models.IntegerField(default=5, help_text='中风险最小重复率')),
                ('dup_min_high_rate', models.IntegerField(default=11, help_text='高风险最小重复率')),
                ('dup_min_exhi_rate', models.IntegerField(default=20, help_text='极高风险风险最小重复率')),
                ('dup_issue_limit', models.IntegerField(default=1000, help_text='上报重复代码块数上限')),
                ('cloc_scan_enabled', models.BooleanField(default=True, help_text='新版代码统计，默认关闭')),
                ('use_lang', models.BooleanField(default=False, help_text='只统计方案指定语言，默认关闭')),
                ('core_file_path',
                 models.CharField(blank=True, help_text='兼容已有配置文件corefiles.xml，供代码统计使用',
                                  max_length=256, null=True,
                                  verbose_name='核心文件配置路径')),
                ('file_mon_path',
                 models.CharField(blank=True, help_text='兼容已有配置文件filemon.xml，供代码统计使用',
                                  max_length=256, null=True,
                                  verbose_name='文件监控配置路径')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('deleter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='删除人')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='最近修改人')),
                ('scan_scheme', models.OneToOneField(help_text='扫描方案', on_delete=django.db.models.deletion.CASCADE,
                                                     to='codeproj.basescanscheme')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codeproj_lintbasesetting
            name='LintBaseSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('enabled', models.BooleanField(default=False, help_text='是否开启')),
                ('default_author',
                 models.CharField(blank=True, help_text='当获取不到问题代码提交人时的缺省提单人，如不设置则默认为空', max_length=64, null=True,
                                  verbose_name='缺省责任人')),
                ('build_cmd', models.TextField(blank=True, help_text='咨询项目的开发,如果还有问题联系bensonqin或yalechen', null=True,
                                               verbose_name='编译命令')),
                ('envs', models.TextField(blank=True, help_text='环境变量', null=True, verbose_name='环境变量')),
                ('pre_cmd', models.CharField(blank=True, help_text='项目编译前需要执行的命令', max_length=512, null=True,
                                             verbose_name='前置命令')),
                ('checkprofile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                   to='scan_conf.checkprofile', verbose_name='检测检测集')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('deleter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='删除人')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='最近修改人')),
                ('scan_scheme', models.OneToOneField(help_text='扫描方案', on_delete=django.db.models.deletion.CASCADE,
                                                     to='codeproj.basescanscheme')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codeproj_label
            name='Label',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='创建时间')),
                ('modified_time',
                 models.DateTimeField(db_index=True, default=apps.base.basemodel.utcnow, verbose_name='最近修改时间')),
                ('deleted_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='删除时间')),
                ('name', models.CharField(help_text='标签', max_length=64)),
                ('index', models.IntegerField(default=0, help_text='同级标签序号')),
                ('description', models.CharField(blank=True, help_text='标签描述信息', max_length=256, null=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('deleter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='删除人')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='最近修改人')),
                ('parent_label', models.ForeignKey(blank=True, help_text='上级标签', null=True,
                                                   on_delete=django.db.models.deletion.SET_NULL, to='codeproj.label')),
                ('project_team', models.ForeignKey(blank=True, help_text='所属项目团队', null=True,
                                                   on_delete=django.db.models.deletion.SET_NULL,
                                                   to='codeproj.projectteam')),
            ],
            options={
                'unique_together': {('project_team', 'name')},
            },
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            # codeproj_commonsetting
            name='CommonSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='codeproj.baseproject')),
            ],
        ),
        migrations.CreateModel(
            # codeproj_codemetricdupinfo
            name='CodeMetricDupInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scan_revision', models.CharField(blank=True, max_length=64, null=True, verbose_name='扫描版本号')),
                ('scan_time', models.DateTimeField(blank=True, null=True, verbose_name='扫描时间')),
                ('last_revision', models.CharField(blank=True, max_length=256, null=True, verbose_name='旧版本号')),
                ('duplicate_file_count', models.IntegerField(blank=True, null=True, verbose_name='重复文件数')),
                ('duplicate_block_count', models.IntegerField(blank=True, null=True, verbose_name='重复块数')),
                ('duplicate_line_count', models.IntegerField(blank=True, null=True, verbose_name='重复行数')),
                ('diff_duplicate_block_count', models.IntegerField(blank=True, null=True, verbose_name='差异重复块数')),
                ('diff_duplicate_line_count', models.IntegerField(blank=True, null=True, verbose_name='差异重复行数')),
                ('close_issue_count', models.IntegerField(blank=True, null=True, verbose_name='关闭历史issue数')),
                ('new_issue_count', models.IntegerField(blank=True, null=True, verbose_name='新增issue数')),
                ('reopen_issue_count', models.IntegerField(blank=True, null=True, verbose_name='重新打开issue数')),
                ('ignored_issue_count', models.IntegerField(blank=True, null=True, verbose_name='入库忽略issue数')),
                ('duplicate_rate', models.FloatField(blank=True, null=True, verbose_name='重复率')),
                ('default_summary', models.TextField(blank=True, null=True, verbose_name='默认标准的总结')),
                ('custom_summary', models.TextField(blank=True, null=True, verbose_name='自定义标准的总结')),
                ('project',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='codeproj.baseproject')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            # codeproj_codemetricclocinfo
            name='CodeMetricClocInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scan_revision', models.CharField(blank=True, max_length=64, null=True, verbose_name='扫描版本号')),
                ('scan_time', models.DateTimeField(blank=True, null=True, verbose_name='扫描时间')),
                ('last_revision', models.CharField(blank=True, max_length=256, null=True, verbose_name='旧版本号')),
                ('code_line_num', models.IntegerField(blank=True, null=True, verbose_name='代码行数')),
                ('comment_line_num', models.IntegerField(blank=True, null=True, verbose_name='注释行数')),
                ('blank_line_num', models.IntegerField(blank=True, null=True, verbose_name='空白行数')),
                ('total_line_num', models.IntegerField(blank=True, null=True, verbose_name='总行数')),
                ('add_code_line_num', models.IntegerField(blank=True, null=True, verbose_name='新增代码行数')),
                ('add_comment_line_num', models.IntegerField(blank=True, null=True, verbose_name='新增注释行数')),
                ('add_blank_line_num', models.IntegerField(blank=True, null=True, verbose_name='新增空白行数')),
                ('add_total_line_num', models.IntegerField(blank=True, null=True, verbose_name='新增总行数')),
                ('mod_code_line_num', models.IntegerField(blank=True, null=True, verbose_name='修改代码行数')),
                ('mod_comment_line_num', models.IntegerField(blank=True, null=True, verbose_name='修改注释行数')),
                ('mod_blank_line_num', models.IntegerField(blank=True, null=True, verbose_name='修改空白行数')),
                ('mod_total_line_num', models.IntegerField(blank=True, null=True, verbose_name='修改总行数')),
                ('del_code_line_num', models.IntegerField(blank=True, null=True, verbose_name='删除代码行数')),
                ('del_comment_line_num', models.IntegerField(blank=True, null=True, verbose_name='删除注释行数')),
                ('del_blank_line_num', models.IntegerField(blank=True, null=True, verbose_name='删除空白行数')),
                ('del_total_line_num', models.IntegerField(blank=True, null=True, verbose_name='删除总行数')),
                ('project',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='codeproj.baseproject')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            # codeproj_codemetricccinfo
            name='CodeMetricCCInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scan_revision', models.CharField(blank=True, max_length=64, null=True, verbose_name='扫描版本号')),
                ('scan_time', models.DateTimeField(blank=True, null=True, verbose_name='扫描时间')),
                ('last_revision', models.CharField(blank=True, max_length=256, null=True, verbose_name='旧版本号')),
                ('cc_open_num', models.IntegerField(blank=True, null=True)),
                ('cc_fix_num', models.IntegerField(default=0)),
                ('default_summary', models.TextField(blank=True, null=True, verbose_name='默认标准的总结')),
                ('custom_summary', models.TextField(blank=True, null=True, verbose_name='自定义标准的总结')),
                ('project',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='codeproj.baseproject')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            # codeproj_codelintinfo
            name='CodeLintInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scan_revision', models.CharField(blank=True, max_length=64, null=True, verbose_name='扫描版本号')),
                ('scan_time', models.DateTimeField(blank=True, null=True, verbose_name='扫描时间')),
                ('issue_open_num', models.IntegerField(blank=True, null=True, verbose_name='新增缺陷数')),
                ('issue_fix_num', models.IntegerField(blank=True, null=True, verbose_name='修复缺陷数')),
                ('active_severity_detail',
                 models.CharField(blank=True, max_length=512, null=True, verbose_name='严重级别详情')),
                ('active_category_detail', models.CharField(blank=True, max_length=512,
                                                            null=True, verbose_name='类别详情')),
                ('total_state_detail', models.CharField(blank=True, max_length=512,
                                                        null=True, verbose_name='状态详情')),
                ('total_severity_detail', models.CharField(blank=True, max_length=512,
                                                           null=True, verbose_name='严重级别详情')),
                ('total_category_detail', models.CharField(blank=True, max_length=512,
                                                           null=True, verbose_name='类别详情')),
                ('scan_summary', models.TextField(blank=True, null=True, verbose_name='本次扫描总结报告')),
                ('total_summary', models.TextField(blank=True, null=True, verbose_name='累计总结报告')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE,
                                                 to='codeproj.baseproject')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='baserepository',
            name='labels',
            field=models.ManyToManyField(blank=True, help_text='绑定标签', related_name='label_repo', to='codeproj.Label'),
        ),
        migrations.AddField(
            model_name='baserepository',
            name='modifier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='最近修改人'),
        ),
        migrations.AddField(
            model_name='baserepository',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='所属团队', null=True,
                                    on_delete=django.db.models.deletion.SET_NULL, to='authen.organization'),
        ),
        migrations.AddField(
            model_name='baserepository',
            name='project_team',
            field=models.ForeignKey(blank=True, help_text='所属项目组', null=True,
                                    on_delete=django.db.models.deletion.SET_NULL, to='codeproj.projectteam'),
        ),
        migrations.AddField(
            model_name='baserepository',
            name='scm_auth',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='authen.scmbaseauth', verbose_name='代码库授权'),
        ),
        migrations.AddField(
            model_name='baserepository',
            name='subscribers',
            field=models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='关注人'),
        ),
        migrations.AddField(
            model_name='baseproject',
            name='repo',
            field=models.ForeignKey(help_text='关联代码库', null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='codeproj.baserepository'),
        ),
        migrations.AddField(
            model_name='baseproject',
            name='scan_scheme',
            field=models.ForeignKey(help_text='关联扫描方案', null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='codeproj.basescanscheme'),
        ),
        migrations.AddField(
            model_name='baseproject',
            name='scm_auth',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='authen.scmbaseauth', verbose_name='项目授权'),
        ),
        migrations.CreateModel(
            # codeproj_schemedefaultscanpathexcludemap
            name='SchemeDefaultScanPathExcludeMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('default_scan_path',
                 models.ForeignKey(help_text='过滤路径', null=True, on_delete=django.db.models.deletion.SET_NULL,
                                   to='codeproj.defaultscanpath')),
                ('scan_scheme',
                 models.ForeignKey(help_text='扫描方案', null=True, on_delete=django.db.models.deletion.SET_NULL,
                                   to='codeproj.basescanscheme')),
            ],
            options={
                'unique_together': {('scan_scheme', 'default_scan_path')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='baserepository',
            unique_together={('scm_url', 'url_key')},
        ),
        migrations.AlterUniqueTogether(
            name='baseproject',
            unique_together={('repo', 'scan_scheme', 'branch')},
        ),
    ]
