[
    {
        "name": "javawarning",
        "display_name": "JavaWarning",
        "description": "Java编译警告扫描（需要编译）\n若需接入，需额外配置。",
        "license": "自研工具",
        "libscheme_set": [],
        "task_processes": [
            "analyze",
            "datahandle",
            "compile"
        ],
        "scan_app": "codelint",
        "scm_url": null,
        "run_cmd": null,
        "envs": null,
        "build_flag": true,
        "checkrule_set": [
            {
                "real_name": "boxing",
                "display_name": "boxing",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to boxing/unboxing operations",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to boxing/unboxing operations.\nBoxing and unboxing conversions",
                "disable": false
            },
            {
                "real_name": "cast",
                "display_name": "cast",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to cast operations",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to cast operations.\nUnnecessary cast or 'instanceof' operation",
                "disable": false
            },
            {
                "real_name": "classfile",
                "display_name": "classfile",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to classfile contents",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to classfile contents.\n参考[文献](https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javac.html)",
                "disable": false
            },
            {
                "real_name": "dep-ann",
                "display_name": "dep-ann",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to deprecated annotation",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to deprecated annotation.\nMissing '@Deprecated' annotation",
                "disable": false
            },
            {
                "real_name": "deprecation",
                "display_name": "deprecation",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to deprecation",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to deprecation.\nDeprecated API",
                "disable": false
            },
            {
                "real_name": "divzero",
                "display_name": "divzero",
                "severity": "error",
                "category": "correctness",
                "rule_title": "warnings relative to division by constant integer 0",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to division by constant integer 0.For example:\n int divideByZero = 42 / 0;\n参考[文献](https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javac.html)",
                "disable": false
            },
            {
                "real_name": "empty",
                "display_name": "empty",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to empty statements after if statements.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to empty statements after if statements.\n参考[文献](https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javac.html)",
                "disable": false
            },
            {
                "real_name": "fallthrough",
                "display_name": "fallthrough",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to missing breaks in switch statements",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to missing breaks in switch statements.\n'switch' case fall-through",
                "disable": false
            },
            {
                "real_name": "finally",
                "display_name": "finally",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to finally block that don't return",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to finally block that don't return.\n'finally' does not complete normally",
                "disable": false
            },
            {
                "real_name": "hiding",
                "display_name": "hiding",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to locals that hide variable",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to locals that hide variable.\nLocal variable declaration hides another field or variable",
                "disable": false
            },
            {
                "real_name": "incomplete-switch",
                "display_name": "incomplete-switch",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to missing entries in a switch statement (enum case)",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to missing entries in a switch statement (enum case).\nIncomplete 'switch' cases on enum",
                "disable": false
            },
            {
                "real_name": "javadoc",
                "display_name": "javadoc",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to javadoc warnings",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to javadoc warnings.\nAll options in [Java Compiler Javadoc Preferences](https://rtist.hcldoc.com/help/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fpreferences%2Fjava%2Fcompiler%2Fref-preferences-javadoc.htm)",
                "disable": false
            },
            {
                "real_name": "nls",
                "display_name": "nls",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to non-nls string literals",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to non-nls string literals.\nNon-externalized strings",
                "disable": false
            },
            {
                "real_name": "null",
                "display_name": "null",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to null analysis",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to null analysis.\nAll options in [Java Compile Errors/Warnings Preferences for Null Analysis](https://rtist.hcldoc.com/help/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fpreferences%2Fjava%2Fcompiler%2Fref-preferences-errors-warnings.htm&anchor=null_analysis)",
                "disable": false
            },
            {
                "real_name": "options",
                "display_name": "options",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to the use of command line options.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to the use of command line options.\n参考[文献](https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javac.html)",
                "disable": false
            },
            {
                "real_name": "overrides",
                "display_name": "overrides",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to regarding method overrides",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to regarding method overrides.\n参考[文献](https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javac.html)",
                "disable": false
            },
            {
                "real_name": "path",
                "display_name": "path",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Warn about invalid path elements and nonexistent path directories on the command line (with regards to the class path, the source path, and other paths)",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "Warn about invalid path elements and nonexistent path directories on the command line (with regards to the class path, the source path, and other paths). \n参考[文献](https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javac.html)",
                "disable": false
            },
            {
                "real_name": "processing",
                "display_name": "processing",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Warn about issues regarding annotation processing.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "Warn about issues regarding annotation processing.\n参考[文献](https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javac.html)",
                "disable": false
            },
            {
                "real_name": "rawtypes",
                "display_name": "rawtypes",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to usage of raw types",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to usage of raw types.\nUsage of a raw type",
                "disable": false
            },
            {
                "real_name": "removal",
                "display_name": "removal",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to usage of terminally deprecated API",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to usage of terminally deprecated API.\nForbidden reference (access rules)\nDiscouraged reference (access rules)",
                "disable": false
            },
            {
                "real_name": "resource",
                "display_name": "resource",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to usage of resources of type Closeable",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to usage of resources of type Closeable.\nResource leak\nPotential resource leak\nResource not managed via try-with-resource",
                "disable": false
            },
            {
                "real_name": "restriction",
                "display_name": "restriction",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to usage of discouraged or forbidden references",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to usage of discouraged or forbidden references.\nForbidden reference (access rules)\nDiscouraged reference (access rules)",
                "disable": false
            },
            {
                "real_name": "serial",
                "display_name": "serial",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to missing serialVersionUID field for a serializable class",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to missing serialVersionUID field for a serializable class.\nSerializable class without serialVersionUID",
                "disable": false
            },
            {
                "real_name": "static",
                "display_name": "static",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Warn about issues relating to use of statics.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "Warn about issues relating to use of statics.\n参考[文献](https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javac.html)",
                "disable": false
            },
            {
                "real_name": "static-access",
                "display_name": "static-access",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to incorrect static access",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to incorrect static access.\nNon-static access to a static member\nIndirect access to a static member",
                "disable": false
            },
            {
                "real_name": "static-method",
                "display_name": "static-method",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to methods that could be declared as static",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to methods that could be declared as static.\nMethod can be static\nMethod can potentially be static",
                "disable": false
            },
            {
                "real_name": "super",
                "display_name": "super",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to overriding a method without super invocations",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to overriding a method without super invocations",
                "disable": false
            },
            {
                "real_name": "sync-override",
                "display_name": "sync-override",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings because of missing synchronize when overriding a synchronized method",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings because of missing synchronize when overriding a synchronized method.\nMissing synchronized modifier on inherited method",
                "disable": false
            },
            {
                "real_name": "synthetic-access",
                "display_name": "synthetic-access",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to unoptimized access from inner classes",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to unoptimized access from inner classes",
                "disable": false
            },
            {
                "real_name": "try",
                "display_name": "try",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Warn about issues relating to use of try blocks, including try-with-resources statements.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "Warn about issues relating to use of try blocks, including try-with-resources statements.\n参考[文献](https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javac.html)",
                "disable": false
            },
            {
                "real_name": "unchecked",
                "display_name": "unchecked",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to unchecked operations",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to unchecked operations.\nUnchecked generic type operation",
                "disable": false
            },
            {
                "real_name": "unlikely-arg-type",
                "display_name": "unlikely-arg-type",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to unlikely argument types",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to unlikely argument types.\nUnqualified access to instance field",
                "disable": false
            },
            {
                "real_name": "unqualified-field-access",
                "display_name": "unqualified-field-access",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to field access unqualified",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to field access unqualified.\nUnqualified access to instance field",
                "disable": false
            },
            {
                "real_name": "unused",
                "display_name": "unused",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "warnings relative to unused code and dead code",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "warnings relative to unused code and dead code.\nDead code\nUnused object allocation\nValue of local variable is not used\nValue of method parameter is not used\nValue of exception parameter is not used\nUnused type parameter\nUnused import\nUnused private member\nUnused 'break' or 'continue' label",
                "disable": false
            },
            {
                "real_name": "varargs",
                "display_name": "varargs",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Warn about unsafe usages of variable arguments (varargs) methods, in particular, those that contain non-reifiable arguments.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "建议解决项目编译警告。",
                "owner": null,
                "labels": [
                    "通用"
                ],
                "description": "Warn about unsafe usages of variable arguments (varargs) methods, in particular, those that contain non-reifiable arguments. \n参考[文献](https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javac.html)",
                "disable": false
            },
            {
                "real_name": "ASTHelpersSuggestions",
                "display_name": "ASTHelpersSuggestions",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Prefer ASTHelpers instead of calling this API directly",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Prefer ASTHelpers instead of calling this API directly",
                "disable": false
            },
            {
                "real_name": "AlmostJavadoc",
                "display_name": "AlmostJavadoc",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This comment contains Javadoc or HTML tags, but isn't started with a double asterisk (/**); is it meant to be Javadoc?",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This comment contains Javadoc or HTML tags, but isn't started with a double asterisk (/**); is it meant to be Javadoc?",
                "disable": false
            },
            {
                "real_name": "AlreadyChecked",
                "display_name": "AlreadyChecked",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This condition has already been checked.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This condition has already been checked.",
                "disable": false
            },
            {
                "real_name": "AmbiguousMethodReference",
                "display_name": "AmbiguousMethodReference",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Method reference is ambiguous",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Method reference is ambiguous",
                "disable": false
            },
            {
                "real_name": "AnnotateFormatMethod",
                "display_name": "AnnotateFormatMethod",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This method passes a pair of parameters through to String.format, but the enclosing method wasn't annotated @FormatMethod. Doing so gives compile-time rather than run-time protection against malformed format strings.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This method passes a pair of parameters through to String.format, but the enclosing method wasn't annotated @FormatMethod. Doing so gives compile-time rather than run-time protection against malformed format strings.",
                "disable": false
            },
            {
                "real_name": "ArgumentSelectionDefectChecker",
                "display_name": "ArgumentSelectionDefectChecker",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Arguments are in the wrong order or could be commented for clarity.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Arguments are in the wrong order or could be commented for clarity.",
                "disable": false
            },
            {
                "real_name": "ArrayAsKeyOfSetOrMap",
                "display_name": "ArrayAsKeyOfSetOrMap",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Arrays do not override equals() or hashCode, so comparisons will be done on reference equality only. If neither deduplication nor lookup are needed, consider using a List instead. Otherwise, use IdentityHashMap/Set, a Map from a library that handles object arrays, or an Iterable/List of pairs.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Arrays do not override equals() or hashCode, so comparisons will be done on reference equality only. If neither deduplication nor lookup are needed, consider using a List instead. Otherwise, use IdentityHashMap/Set, a Map from a library that handles object arrays, or an Iterable/List of pairs.",
                "disable": false
            },
            {
                "real_name": "AssertEqualsArgumentOrderChecker",
                "display_name": "AssertEqualsArgumentOrderChecker",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Arguments are swapped in assertEquals-like call",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Arguments are swapped in assertEquals-like call",
                "disable": false
            },
            {
                "real_name": "AssertThrowsMultipleStatements",
                "display_name": "AssertThrowsMultipleStatements",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "The lambda passed to assertThrows should contain exactly one statement",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The lambda passed to assertThrows should contain exactly one statement",
                "disable": false
            },
            {
                "real_name": "AssertionFailureIgnored",
                "display_name": "AssertionFailureIgnored",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This assertion throws an AssertionError if it fails, which will be caught by an enclosing try block.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This assertion throws an AssertionError if it fails, which will be caught by an enclosing try block.",
                "disable": false
            },
            {
                "real_name": "AssistedInjectAndInjectOnSameConstructor",
                "display_name": "AssistedInjectAndInjectOnSameConstructor",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "@AssistedInject and @Inject cannot be used on the same constructor.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "@AssistedInject and @Inject cannot be used on the same constructor.",
                "disable": false
            },
            {
                "real_name": "AutoValueFinalMethods",
                "display_name": "AutoValueFinalMethods",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Make toString(), hashCode() and equals() final in AutoValue classes, so it is clear to readers that AutoValue is not overriding them",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Make toString(), hashCode() and equals() final in AutoValue classes, so it is clear to readers that AutoValue is not overriding them",
                "disable": false
            },
            {
                "real_name": "AutoValueImmutableFields",
                "display_name": "AutoValueImmutableFields",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "AutoValue recommends using immutable collections",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "AutoValue recommends using immutable collections",
                "disable": false
            },
            {
                "real_name": "AutoValueSubclassLeaked",
                "display_name": "AutoValueSubclassLeaked",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Do not refer to the autogenerated AutoValue_ class outside the file containing the corresponding @AutoValue base class.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Do not refer to the autogenerated AutoValue_ class outside the file containing the corresponding @AutoValue base class.",
                "disable": false
            },
            {
                "real_name": "BadComparable",
                "display_name": "BadComparable",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Possible sign flip from narrowing conversion",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Possible sign flip from narrowing conversion",
                "disable": false
            },
            {
                "real_name": "BadImport",
                "display_name": "BadImport",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Importing nested classes/static methods/static fields with commonly-used names can make code harder to read, because it may not be clear from the context exactly which type is being referred to. Qualifying the name with that of the containing class can make the code clearer.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Importing nested classes/static methods/static fields with commonly-used names can make code harder to read, because it may not be clear from the context exactly which type is being referred to. Qualifying the name with that of the containing class can make the code clearer.",
                "disable": false
            },
            {
                "real_name": "BadInstanceof",
                "display_name": "BadInstanceof",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "instanceof used in a way that is equivalent to a null check.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "instanceof used in a way that is equivalent to a null check.",
                "disable": false
            },
            {
                "real_name": "BareDotMetacharacter",
                "display_name": "BareDotMetacharacter",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "\".\" is rarely useful as a regex, as it matches any character. To match a literal '.' character, instead write \"\\.\".",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "\".\" is rarely useful as a regex, as it matches any character. To match a literal '.' character, instead write \"\\.\".",
                "disable": false
            },
            {
                "real_name": "BigDecimalEquals",
                "display_name": "BigDecimalEquals",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "BigDecimal#equals has surprising behavior: it also compares scale.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "BigDecimal#equals has surprising behavior: it also compares scale.",
                "disable": false
            },
            {
                "real_name": "BigDecimalLiteralDouble",
                "display_name": "BigDecimalLiteralDouble",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "new BigDecimal(double) loses precision in this case.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "new BigDecimal(double) loses precision in this case.",
                "disable": false
            },
            {
                "real_name": "BoxedPrimitiveConstructor",
                "display_name": "BoxedPrimitiveConstructor",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "valueOf or autoboxing provides better time and space performance",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "valueOf or autoboxing provides better time and space performance",
                "disable": false
            },
            {
                "real_name": "BugPatternNaming",
                "display_name": "BugPatternNaming",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Giving BugPatterns a name different to the enclosing class can be confusing",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Giving BugPatterns a name different to the enclosing class can be confusing",
                "disable": false
            },
            {
                "real_name": "ByteBufferBackingArray",
                "display_name": "ByteBufferBackingArray",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "ByteBuffer.array() shouldn't be called unless ByteBuffer.arrayOffset() is used or if the ByteBuffer was initialized using ByteBuffer.wrap() or ByteBuffer.allocate().",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "ByteBuffer.array() shouldn't be called unless ByteBuffer.arrayOffset() is used or if the ByteBuffer was initialized using ByteBuffer.wrap() or ByteBuffer.allocate().",
                "disable": false
            },
            {
                "real_name": "CacheLoaderNull",
                "display_name": "CacheLoaderNull",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "The result of CacheLoader#load must be non-null.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The result of CacheLoader#load must be non-null.",
                "disable": false
            },
            {
                "real_name": "CanonicalDuration",
                "display_name": "CanonicalDuration",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Duration can be expressed more clearly with different units",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Duration can be expressed more clearly with different units",
                "disable": false
            },
            {
                "real_name": "CatchAndPrintStackTrace",
                "display_name": "CatchAndPrintStackTrace",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Logging or rethrowing exceptions should usually be preferred to catching and calling printStackTrace",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Logging or rethrowing exceptions should usually be preferred to catching and calling printStackTrace",
                "disable": false
            },
            {
                "real_name": "CatchFail",
                "display_name": "CatchFail",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Ignoring exceptions and calling fail() is unnecessary, and makes test output less useful",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Ignoring exceptions and calling fail() is unnecessary, and makes test output less useful",
                "disable": false
            },
            {
                "real_name": "ChainedAssertionLosesContext",
                "display_name": "ChainedAssertionLosesContext",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Inside a Subject, use check(\u2026) instead of assert*() to preserve user-supplied messages and other settings.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Inside a Subject, use check(\u2026) instead of assert*() to preserve user-supplied messages and other settings.",
                "disable": false
            },
            {
                "real_name": "CharacterGetNumericValue",
                "display_name": "CharacterGetNumericValue",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "getNumericValue has unexpected behaviour: it interprets A-Z as base-36 digits with values 10-35, but also supports non-arabic numerals and miscellaneous numeric unicode characters like \u32b7; consider using Character.digit or UCharacter.getUnicodeNumericValue instead",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "getNumericValue has unexpected behaviour: it interprets A-Z as base-36 digits with values 10-35, but also supports non-arabic numerals and miscellaneous numeric unicode characters like \u32b7; consider using Character.digit or UCharacter.getUnicodeNumericValue instead",
                "disable": false
            },
            {
                "real_name": "ClassCanBeStatic",
                "display_name": "ClassCanBeStatic",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Inner class is non-static but does not reference enclosing class",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Inner class is non-static but does not reference enclosing class",
                "disable": false
            },
            {
                "real_name": "ClassNewInstance",
                "display_name": "ClassNewInstance",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
                "disable": false
            },
            {
                "real_name": "CloseableProvides",
                "display_name": "CloseableProvides",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Providing Closeable resources makes their lifecycle unclear",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Providing Closeable resources makes their lifecycle unclear",
                "disable": false
            },
            {
                "real_name": "CollectionUndefinedEquality",
                "display_name": "CollectionUndefinedEquality",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This type does not have well-defined equals behavior.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This type does not have well-defined equals behavior.",
                "disable": false
            },
            {
                "real_name": "CollectorShouldNotUseState",
                "display_name": "CollectorShouldNotUseState",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Collector.of() should not use state",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Collector.of() should not use state",
                "disable": false
            },
            {
                "real_name": "ComparableAndComparator",
                "display_name": "ComparableAndComparator",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Class should not implement both `Comparable` and `Comparator`",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Class should not implement both `Comparable` and `Comparator`",
                "disable": false
            },
            {
                "real_name": "CompareToZero",
                "display_name": "CompareToZero",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "The result of #compareTo or #compare should only be compared to 0. It is an implementation detail whether a given type returns strictly the values {-1, 0, +1} or others.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The result of #compareTo or #compare should only be compared to 0. It is an implementation detail whether a given type returns strictly the values {-1, 0, +1} or others.",
                "disable": false
            },
            {
                "real_name": "ComplexBooleanConstant",
                "display_name": "ComplexBooleanConstant",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Non-trivial compile time constant boolean expressions shouldn't be used.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Non-trivial compile time constant boolean expressions shouldn't be used.",
                "disable": false
            },
            {
                "real_name": "DateChecker",
                "display_name": "DateChecker",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Warns against suspect looking calls to java.util.Date APIs",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Warns against suspect looking calls to java.util.Date APIs",
                "disable": false
            },
            {
                "real_name": "DateFormatConstant",
                "display_name": "DateFormatConstant",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "DateFormat is not thread-safe, and should not be used as a constant field.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "DateFormat is not thread-safe, and should not be used as a constant field.",
                "disable": false
            },
            {
                "real_name": "DefaultCharset",
                "display_name": "DefaultCharset",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Implicit use of the platform default charset, which can result in differing behaviour between JVM executions or incorrect behavior if the encoding of the data source doesn't match expectations.",
                "disable": false
            },
            {
                "real_name": "DefaultPackage",
                "display_name": "DefaultPackage",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Java classes shouldn't use default package",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Java classes shouldn't use default package",
                "disable": false
            },
            {
                "real_name": "DeprecatedVariable",
                "display_name": "DeprecatedVariable",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Applying the @Deprecated annotation to local variables or parameters has no effect",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Applying the @Deprecated annotation to local variables or parameters has no effect",
                "disable": false
            },
            {
                "real_name": "DirectInvocationOnMock",
                "display_name": "DirectInvocationOnMock",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Methods should not be directly invoked on mocks. Should this be part of a verify(..) call?",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Methods should not be directly invoked on mocks. Should this be part of a verify(..) call?",
                "disable": false
            },
            {
                "real_name": "DistinctVarargsChecker",
                "display_name": "DistinctVarargsChecker",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Method expects distinct arguments at some/all positions",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Method expects distinct arguments at some/all positions",
                "disable": false
            },
            {
                "real_name": "DoNotCallSuggester",
                "display_name": "DoNotCallSuggester",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Consider annotating methods that always throw with @DoNotCall. Read more at https://errorprone.info/bugpattern/DoNotCall",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Consider annotating methods that always throw with @DoNotCall. Read more at https://errorprone.info/bugpattern/DoNotCall",
                "disable": false
            },
            {
                "real_name": "DoNotClaimAnnotations",
                "display_name": "DoNotClaimAnnotations",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Don't 'claim' annotations in annotation processors; Processor#process should unconditionally return `false`",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Don't 'claim' annotations in annotation processors; Processor#process should unconditionally return `false`",
                "disable": false
            },
            {
                "real_name": "DoNotMockAutoValue",
                "display_name": "DoNotMockAutoValue",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "AutoValue classes represent pure data classes, so mocking them should not be necessary. Construct a real instance of the class instead.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "AutoValue classes represent pure data classes, so mocking them should not be necessary. Construct a real instance of the class instead.",
                "disable": false
            },
            {
                "real_name": "DoubleCheckedLocking",
                "display_name": "DoubleCheckedLocking",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Double-checked locking on non-volatile fields is unsafe",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Double-checked locking on non-volatile fields is unsafe",
                "disable": false
            },
            {
                "real_name": "EmptyBlockTag",
                "display_name": "EmptyBlockTag",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "A block tag (@param, @return, @throws, @deprecated) has an empty description. Block tags without descriptions don't add much value for future readers of the code; consider removing the tag entirely or adding a description.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "A block tag (@param, @return, @throws, @deprecated) has an empty description. Block tags without descriptions don't add much value for future readers of the code; consider removing the tag entirely or adding a description.",
                "disable": false
            },
            {
                "real_name": "EmptyCatch",
                "display_name": "EmptyCatch",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Caught exceptions should not be ignored",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Caught exceptions should not be ignored",
                "disable": false
            },
            {
                "real_name": "EmptySetMultibindingContributions",
                "display_name": "EmptySetMultibindingContributions",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "@Multibinds is a more efficient and declarative mechanism for ensuring that a set multibinding is present in the graph.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "@Multibinds is a more efficient and declarative mechanism for ensuring that a set multibinding is present in the graph.",
                "disable": false
            },
            {
                "real_name": "EmptyTopLevelDeclaration",
                "display_name": "EmptyTopLevelDeclaration",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Empty top-level type declarations should be omitted",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Empty top-level type declarations should be omitted",
                "disable": false
            },
            {
                "real_name": "EqualsGetClass",
                "display_name": "EqualsGetClass",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Prefer instanceof to getClass when implementing Object#equals.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Prefer instanceof to getClass when implementing Object#equals.",
                "disable": false
            },
            {
                "real_name": "EqualsIncompatibleType",
                "display_name": "EqualsIncompatibleType",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "An equality test between objects with incompatible types always returns false",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "An equality test between objects with incompatible types always returns false",
                "disable": false
            },
            {
                "real_name": "EqualsUnsafeCast",
                "display_name": "EqualsUnsafeCast",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "The contract of #equals states that it should return false for incompatible types, while this implementation may throw ClassCastException.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The contract of #equals states that it should return false for incompatible types, while this implementation may throw ClassCastException.",
                "disable": false
            },
            {
                "real_name": "EqualsUsingHashCode",
                "display_name": "EqualsUsingHashCode",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Implementing #equals by just comparing hashCodes is fragile. Hashes collide frequently, and this will lead to false positives in #equals.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Implementing #equals by just comparing hashCodes is fragile. Hashes collide frequently, and this will lead to false positives in #equals.",
                "disable": false
            },
            {
                "real_name": "ErroneousBitwiseExpression",
                "display_name": "ErroneousBitwiseExpression",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This expression evaluates to 0. If this isn't an error, consider expressing it as a literal 0.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This expression evaluates to 0. If this isn't an error, consider expressing it as a literal 0.",
                "disable": false
            },
            {
                "real_name": "ErroneousThreadPoolConstructorChecker",
                "display_name": "ErroneousThreadPoolConstructorChecker",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Thread pool size will never go beyond corePoolSize if an unbounded queue is used",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Thread pool size will never go beyond corePoolSize if an unbounded queue is used",
                "disable": false
            },
            {
                "real_name": "EscapedEntity",
                "display_name": "EscapedEntity",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "HTML entities in @code/@literal tags will appear literally in the rendered javadoc.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "HTML entities in @code/@literal tags will appear literally in the rendered javadoc.",
                "disable": false
            },
            {
                "real_name": "ExtendingJUnitAssert",
                "display_name": "ExtendingJUnitAssert",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "When only using JUnit Assert's static methods, you should import statically instead of extending.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "When only using JUnit Assert's static methods, you should import statically instead of extending.",
                "disable": false
            },
            {
                "real_name": "ExtendsObject",
                "display_name": "ExtendsObject",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "`T extends Object` is redundant (unless you are using the Checker Framework).",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "`T extends Object` is redundant (unless you are using the Checker Framework).",
                "disable": false
            },
            {
                "real_name": "FallThrough",
                "display_name": "FallThrough",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Switch case may fall through",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Switch case may fall through",
                "disable": false
            },
            {
                "real_name": "Finalize",
                "display_name": "Finalize",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Do not override finalize",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Do not override finalize",
                "disable": false
            },
            {
                "real_name": "Finally",
                "display_name": "Finally",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "If you return or throw from a finally, then values returned or thrown from the try-catch block will be ignored. Consider using try-with-resources instead.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "If you return or throw from a finally, then values returned or thrown from the try-catch block will be ignored. Consider using try-with-resources instead.",
                "disable": false
            },
            {
                "real_name": "FloatCast",
                "display_name": "FloatCast",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Use parentheses to make the precedence explicit",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Use parentheses to make the precedence explicit",
                "disable": false
            },
            {
                "real_name": "FloatingPointAssertionWithinEpsilon",
                "display_name": "FloatingPointAssertionWithinEpsilon",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This fuzzy equality check is using a tolerance less than the gap to the next number. You may want a less restrictive tolerance, or to assert equality.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This fuzzy equality check is using a tolerance less than the gap to the next number. You may want a less restrictive tolerance, or to assert equality.",
                "disable": false
            },
            {
                "real_name": "FloatingPointLiteralPrecision",
                "display_name": "FloatingPointLiteralPrecision",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Floating point literal loses precision",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Floating point literal loses precision",
                "disable": false
            },
            {
                "real_name": "FloggerArgumentToString",
                "display_name": "FloggerArgumentToString",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Use Flogger's printf-style formatting instead of explicitly converting arguments to strings",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Use Flogger's printf-style formatting instead of explicitly converting arguments to strings",
                "disable": false
            },
            {
                "real_name": "FloggerStringConcatenation",
                "display_name": "FloggerStringConcatenation",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Prefer string formatting using printf placeholders (e.g. %s) instead of string concatenation",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Prefer string formatting using printf placeholders (e.g. %s) instead of string concatenation",
                "disable": false
            },
            {
                "real_name": "FragmentInjection",
                "display_name": "FragmentInjection",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Classes extending PreferenceActivity must implement isValidFragment such that it does not unconditionally return true to prevent vulnerability to fragment injection attacks.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Classes extending PreferenceActivity must implement isValidFragment such that it does not unconditionally return true to prevent vulnerability to fragment injection attacks.",
                "disable": false
            },
            {
                "real_name": "FragmentNotInstantiable",
                "display_name": "FragmentNotInstantiable",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Subclasses of Fragment must be instantiable via Class#newInstance(): the class must be public, static and have a public nullary constructor",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Subclasses of Fragment must be instantiable via Class#newInstance(): the class must be public, static and have a public nullary constructor",
                "disable": false
            },
            {
                "real_name": "FutureReturnValueIgnored",
                "display_name": "FutureReturnValueIgnored",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.",
                "disable": false
            },
            {
                "real_name": "GetClassOnEnum",
                "display_name": "GetClassOnEnum",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Calling getClass() on an enum may return a subclass of the enum type",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Calling getClass() on an enum may return a subclass of the enum type",
                "disable": false
            },
            {
                "real_name": "HidingField",
                "display_name": "HidingField",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Hiding fields of superclasses may cause confusion and errors",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Hiding fields of superclasses may cause confusion and errors",
                "disable": false
            },
            {
                "real_name": "IdentityHashMapUsage",
                "display_name": "IdentityHashMapUsage",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "IdentityHashMap usage shouldn't be intermingled with Map",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "IdentityHashMap usage shouldn't be intermingled with Map",
                "disable": false
            },
            {
                "real_name": "IgnoredPureGetter",
                "display_name": "IgnoredPureGetter",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Getters on AutoValues, AutoBuilders, and Protobuf Messages are side-effect free, so there is no point in calling them if the return value is ignored. While there are no side effects from the getter, the receiver may have side effects.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Getters on AutoValues, AutoBuilders, and Protobuf Messages are side-effect free, so there is no point in calling them if the return value is ignored. While there are no side effects from the getter, the receiver may have side effects.",
                "disable": false
            },
            {
                "real_name": "ImmutableAnnotationChecker",
                "display_name": "ImmutableAnnotationChecker",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Annotations should always be immutable",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Annotations should always be immutable",
                "disable": false
            },
            {
                "real_name": "ImmutableEnumChecker",
                "display_name": "ImmutableEnumChecker",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Enums should always be immutable",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Enums should always be immutable",
                "disable": false
            },
            {
                "real_name": "InconsistentCapitalization",
                "display_name": "InconsistentCapitalization",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "It is confusing to have a field and a parameter under the same scope that differ only in capitalization.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "It is confusing to have a field and a parameter under the same scope that differ only in capitalization.",
                "disable": false
            },
            {
                "real_name": "InconsistentHashCode",
                "display_name": "InconsistentHashCode",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Including fields in hashCode which are not compared in equals violates the contract of hashCode.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Including fields in hashCode which are not compared in equals violates the contract of hashCode.",
                "disable": false
            },
            {
                "real_name": "IncorrectMainMethod",
                "display_name": "IncorrectMainMethod",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "'main' methods must be public, static, and void",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "'main' methods must be public, static, and void",
                "disable": false
            },
            {
                "real_name": "IncrementInForLoopAndHeader",
                "display_name": "IncrementInForLoopAndHeader",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This for loop increments the same variable in the header and in the body",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This for loop increments the same variable in the header and in the body",
                "disable": false
            },
            {
                "real_name": "InheritDoc",
                "display_name": "InheritDoc",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Invalid use of @inheritDoc.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Invalid use of @inheritDoc.",
                "disable": false
            },
            {
                "real_name": "InjectInvalidTargetingOnScopingAnnotation",
                "display_name": "InjectInvalidTargetingOnScopingAnnotation",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "A scoping annotation's Target should include TYPE and METHOD.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "A scoping annotation's Target should include TYPE and METHOD.",
                "disable": false
            },
            {
                "real_name": "InjectOnBugCheckers",
                "display_name": "InjectOnBugCheckers",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "BugChecker constructors should be marked @Inject.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "BugChecker constructors should be marked @Inject.",
                "disable": false
            },
            {
                "real_name": "InjectOnConstructorOfAbstractClass",
                "display_name": "InjectOnConstructorOfAbstractClass",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Constructors on abstract classes are never directly @Inject'ed, only the constructors of their subclasses can be @Inject'ed.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Constructors on abstract classes are never directly @Inject'ed, only the constructors of their subclasses can be @Inject'ed.",
                "disable": false
            },
            {
                "real_name": "InjectScopeAnnotationOnInterfaceOrAbstractClass",
                "display_name": "InjectScopeAnnotationOnInterfaceOrAbstractClass",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Scope annotation on an interface or abstract class is not allowed",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Scope annotation on an interface or abstract class is not allowed",
                "disable": false
            },
            {
                "real_name": "InjectedConstructorAnnotations",
                "display_name": "InjectedConstructorAnnotations",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Injected constructors cannot be optional nor have binding annotations",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Injected constructors cannot be optional nor have binding annotations",
                "disable": false
            },
            {
                "real_name": "InlineFormatString",
                "display_name": "InlineFormatString",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Prefer to create format strings inline, instead of extracting them to a single-use constant",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Prefer to create format strings inline, instead of extracting them to a single-use constant",
                "disable": false
            },
            {
                "real_name": "InlineMeInliner",
                "display_name": "InlineMeInliner",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Callers of this API should be inlined.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Callers of this API should be inlined.",
                "disable": false
            },
            {
                "real_name": "InlineMeSuggester",
                "display_name": "InlineMeSuggester",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This deprecated API looks inlineable. If you'd like the body of the API to be inlined to its callers, please annotate it with @InlineMe.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This deprecated API looks inlineable. If you'd like the body of the API to be inlined to its callers, please annotate it with @InlineMe.",
                "disable": false
            },
            {
                "real_name": "InputStreamSlowMultibyteRead",
                "display_name": "InputStreamSlowMultibyteRead",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Please also override int read(byte[], int, int), otherwise multi-byte reads from this input stream are likely to be slow.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Please also override int read(byte[], int, int), otherwise multi-byte reads from this input stream are likely to be slow.",
                "disable": false
            },
            {
                "real_name": "InstanceOfAndCastMatchWrongType",
                "display_name": "InstanceOfAndCastMatchWrongType",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Casting inside an if block should be plausibly consistent with the instanceof type",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Casting inside an if block should be plausibly consistent with the instanceof type",
                "disable": false
            },
            {
                "real_name": "IntLongMath",
                "display_name": "IntLongMath",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Expression of type int may overflow before being assigned to a long",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Expression of type int may overflow before being assigned to a long",
                "disable": false
            },
            {
                "real_name": "InvalidBlockTag",
                "display_name": "InvalidBlockTag",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This tag is invalid.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This tag is invalid.",
                "disable": false
            },
            {
                "real_name": "InvalidInlineTag",
                "display_name": "InvalidInlineTag",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This tag is invalid.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This tag is invalid.",
                "disable": false
            },
            {
                "real_name": "InvalidLink",
                "display_name": "InvalidLink",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This @link tag looks wrong.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This @link tag looks wrong.",
                "disable": false
            },
            {
                "real_name": "InvalidParam",
                "display_name": "InvalidParam",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This @param tag doesn't refer to a parameter of the method.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This @param tag doesn't refer to a parameter of the method.",
                "disable": false
            },
            {
                "real_name": "InvalidThrows",
                "display_name": "InvalidThrows",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "The documented method doesn't actually throw this checked exception.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The documented method doesn't actually throw this checked exception.",
                "disable": false
            },
            {
                "real_name": "InvalidThrowsLink",
                "display_name": "InvalidThrowsLink",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Javadoc links to exceptions in @throws without a @link tag (@throws Exception, not @throws {@link Exception}).",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Javadoc links to exceptions in @throws without a @link tag (@throws Exception, not @throws {@link Exception}).",
                "disable": false
            },
            {
                "real_name": "IterableAndIterator",
                "display_name": "IterableAndIterator",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Class should not implement both `Iterable` and `Iterator`",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Class should not implement both `Iterable` and `Iterator`",
                "disable": false
            },
            {
                "real_name": "JUnit3FloatingPointComparisonWithoutDelta",
                "display_name": "JUnit3FloatingPointComparisonWithoutDelta",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Floating-point comparison without error tolerance",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Floating-point comparison without error tolerance",
                "disable": false
            },
            {
                "real_name": "JUnit4ClassUsedInJUnit3",
                "display_name": "JUnit4ClassUsedInJUnit3",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Some JUnit4 construct cannot be used in a JUnit3 context. Convert your class to JUnit4 style to use them.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Some JUnit4 construct cannot be used in a JUnit3 context. Convert your class to JUnit4 style to use them.",
                "disable": false
            },
            {
                "real_name": "JUnitAmbiguousTestClass",
                "display_name": "JUnitAmbiguousTestClass",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Test class inherits from JUnit 3's TestCase but has JUnit 4 @Test or @RunWith annotations.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Test class inherits from JUnit 3's TestCase but has JUnit 4 @Test or @RunWith annotations.",
                "disable": false
            },
            {
                "real_name": "JavaDurationGetSecondsGetNano",
                "display_name": "JavaDurationGetSecondsGetNano",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "duration.getNano() only accesses the underlying nanosecond adjustment from the whole second.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "duration.getNano() only accesses the underlying nanosecond adjustment from the whole second.",
                "disable": false
            },
            {
                "real_name": "JavaDurationWithNanos",
                "display_name": "JavaDurationWithNanos",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Use of java.time.Duration.withNanos(int) is not allowed.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Use of java.time.Duration.withNanos(int) is not allowed.",
                "disable": false
            },
            {
                "real_name": "JavaDurationWithSeconds",
                "display_name": "JavaDurationWithSeconds",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Use of java.time.Duration.withSeconds(long) is not allowed.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Use of java.time.Duration.withSeconds(long) is not allowed.",
                "disable": false
            },
            {
                "real_name": "JavaInstantGetSecondsGetNano",
                "display_name": "JavaInstantGetSecondsGetNano",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "instant.getNano() only accesses the underlying nanosecond adjustment from the whole second.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "instant.getNano() only accesses the underlying nanosecond adjustment from the whole second.",
                "disable": false
            },
            {
                "real_name": "JavaLangClash",
                "display_name": "JavaLangClash",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Never reuse class names from java.lang",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Never reuse class names from java.lang",
                "disable": false
            },
            {
                "real_name": "JavaLocalDateTimeGetNano",
                "display_name": "JavaLocalDateTimeGetNano",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "localDateTime.getNano() only accesss the nanos-of-second field. It's rare to only use getNano() without a nearby getSecond() call.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "localDateTime.getNano() only accesss the nanos-of-second field. It's rare to only use getNano() without a nearby getSecond() call.",
                "disable": false
            },
            {
                "real_name": "JavaLocalTimeGetNano",
                "display_name": "JavaLocalTimeGetNano",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "localTime.getNano() only accesses the nanos-of-second field. It's rare to only use getNano() without a nearby getSecond() call.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "localTime.getNano() only accesses the nanos-of-second field. It's rare to only use getNano() without a nearby getSecond() call.",
                "disable": false
            },
            {
                "real_name": "JavaPeriodGetDays",
                "display_name": "JavaPeriodGetDays",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "period.getDays() only accesses the \"days\" portion of the Period, and doesn't represent the total span of time of the period. Consider using org.threeten.extra.Days to extract the difference between two civil dates if you want the whole time.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "period.getDays() only accesses the \"days\" portion of the Period, and doesn't represent the total span of time of the period. Consider using org.threeten.extra.Days to extract the difference between two civil dates if you want the whole time.",
                "disable": false
            },
            {
                "real_name": "JavaTimeDefaultTimeZone",
                "display_name": "JavaTimeDefaultTimeZone",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "java.time APIs that silently use the default system time-zone are not allowed.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "java.time APIs that silently use the default system time-zone are not allowed.",
                "disable": false
            },
            {
                "real_name": "JavaUtilDate",
                "display_name": "JavaUtilDate",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Date has a bad API that leads to bugs; prefer java.time.Instant or LocalDate.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Date has a bad API that leads to bugs; prefer java.time.Instant or LocalDate.",
                "disable": false
            },
            {
                "real_name": "JavaxInjectOnFinalField",
                "display_name": "JavaxInjectOnFinalField",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "@javax.inject.Inject cannot be put on a final field.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "@javax.inject.Inject cannot be put on a final field.",
                "disable": false
            },
            {
                "real_name": "JdkObsolete",
                "display_name": "JdkObsolete",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Suggests alternatives to obsolete JDK classes.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Suggests alternatives to obsolete JDK classes.",
                "disable": false
            },
            {
                "real_name": "JodaConstructors",
                "display_name": "JodaConstructors",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Use of certain JodaTime constructors are not allowed.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Use of certain JodaTime constructors are not allowed.",
                "disable": false
            },
            {
                "real_name": "JodaDateTimeConstants",
                "display_name": "JodaDateTimeConstants",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Using the `PER` constants in `DateTimeConstants` is problematic because they encourage manual date/time math.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Using the `PER` constants in `DateTimeConstants` is problematic because they encourage manual date/time math.",
                "disable": false
            },
            {
                "real_name": "JodaDurationWithMillis",
                "display_name": "JodaDurationWithMillis",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Use of duration.withMillis(long) is not allowed. Please use Duration.millis(long) instead.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Use of duration.withMillis(long) is not allowed. Please use Duration.millis(long) instead.",
                "disable": false
            },
            {
                "real_name": "JodaInstantWithMillis",
                "display_name": "JodaInstantWithMillis",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Use of instant.withMillis(long) is not allowed. Use Instant.ofEpochMilli(long) instead.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Use of instant.withMillis(long) is not allowed. Use Instant.ofEpochMilli(long) instead.",
                "disable": false
            },
            {
                "real_name": "JodaNewPeriod",
                "display_name": "JodaNewPeriod",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This may have surprising semantics, e.g. new Period(LocalDate.parse(\"1970-01-01\"), LocalDate.parse(\"1970-02-02\")).getDays() == 1, not 32.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This may have surprising semantics, e.g. new Period(LocalDate.parse(\"1970-01-01\"), LocalDate.parse(\"1970-02-02\")).getDays() == 1, not 32.",
                "disable": false
            },
            {
                "real_name": "JodaPlusMinusLong",
                "display_name": "JodaPlusMinusLong",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Use of JodaTime's type.plus(long) or type.minus(long) is not allowed (where <type> = {Duration,Instant,DateTime,DateMidnight}). Please use type.plus(Duration.millis(long)) or type.minus(Duration.millis(long)) instead.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Use of JodaTime's type.plus(long) or type.minus(long) is not allowed (where <type> = {Duration,Instant,DateTime,DateMidnight}). Please use type.plus(Duration.millis(long)) or type.minus(Duration.millis(long)) instead.",
                "disable": false
            },
            {
                "real_name": "JodaTimeConverterManager",
                "display_name": "JodaTimeConverterManager",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Joda-Time's ConverterManager makes the semantics of DateTime/Instant/etc construction subject to global static state. If you need to define your own converters, use a helper.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Joda-Time's ConverterManager makes the semantics of DateTime/Instant/etc construction subject to global static state. If you need to define your own converters, use a helper.",
                "disable": false
            },
            {
                "real_name": "JodaWithDurationAddedLong",
                "display_name": "JodaWithDurationAddedLong",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Use of JodaTime's type.withDurationAdded(long, int) (where <type> = {Duration,Instant,DateTime}). Please use type.withDurationAdded(Duration.millis(long), int) instead.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Use of JodaTime's type.withDurationAdded(long, int) (where <type> = {Duration,Instant,DateTime}). Please use type.withDurationAdded(Duration.millis(long), int) instead.",
                "disable": false
            },
            {
                "real_name": "LabelledBreakTarget",
                "display_name": "LabelledBreakTarget",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Labels should only be used on loops.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Labels should only be used on loops.",
                "disable": false
            },
            {
                "real_name": "LiteEnumValueOf",
                "display_name": "LiteEnumValueOf",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Instead of converting enums to string and back, its numeric value should be used instead as it is the stable part of the protocol defined by the enum.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Instead of converting enums to string and back, its numeric value should be used instead as it is the stable part of the protocol defined by the enum.",
                "disable": false
            },
            {
                "real_name": "LiteProtoToString",
                "display_name": "LiteProtoToString",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "toString() on lite protos will not generate a useful representation of the proto from optimized builds. Consider whether using some subset of fields instead would provide useful information.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "toString() on lite protos will not generate a useful representation of the proto from optimized builds. Consider whether using some subset of fields instead would provide useful information.",
                "disable": false
            },
            {
                "real_name": "LockNotBeforeTry",
                "display_name": "LockNotBeforeTry",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Calls to Lock#lock should be immediately followed by a try block which releases the lock.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Calls to Lock#lock should be immediately followed by a try block which releases the lock.",
                "disable": false
            },
            {
                "real_name": "LogicalAssignment",
                "display_name": "LogicalAssignment",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Assignment where a boolean expression was expected; use == if this assignment wasn't expected or add parentheses for clarity.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Assignment where a boolean expression was expected; use == if this assignment wasn't expected or add parentheses for clarity.",
                "disable": false
            },
            {
                "real_name": "LongDoubleConversion",
                "display_name": "LongDoubleConversion",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Conversion from long to double may lose precision; use an explicit cast to double if this was intentional",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Conversion from long to double may lose precision; use an explicit cast to double if this was intentional",
                "disable": false
            },
            {
                "real_name": "LongFloatConversion",
                "display_name": "LongFloatConversion",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Conversion from long to float may lose precision; use an explicit cast to float if this was intentional",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Conversion from long to float may lose precision; use an explicit cast to float if this was intentional",
                "disable": false
            },
            {
                "real_name": "LoopOverCharArray",
                "display_name": "LoopOverCharArray",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "toCharArray allocates a new array, using charAt is more efficient",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "toCharArray allocates a new array, using charAt is more efficient",
                "disable": false
            },
            {
                "real_name": "MalformedInlineTag",
                "display_name": "MalformedInlineTag",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This Javadoc tag is malformed. The correct syntax is {@tag and not @{tag.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This Javadoc tag is malformed. The correct syntax is {@tag and not @{tag.",
                "disable": false
            },
            {
                "real_name": "MathAbsoluteNegative",
                "display_name": "MathAbsoluteNegative",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Math.abs does not always give a positive result. Please consider other methods for positive numbers.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Math.abs does not always give a positive result. Please consider other methods for positive numbers.",
                "disable": false
            },
            {
                "real_name": "MemoizeConstantVisitorStateLookups",
                "display_name": "MemoizeConstantVisitorStateLookups",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Anytime you need to look up a constant value from VisitorState, improve performance by creating a cache for it with VisitorState.memoize",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Anytime you need to look up a constant value from VisitorState, improve performance by creating a cache for it with VisitorState.memoize",
                "disable": false
            },
            {
                "real_name": "MissingCasesInEnumSwitch",
                "display_name": "MissingCasesInEnumSwitch",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Switches on enum types should either handle all values, or have a default case.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Switches on enum types should either handle all values, or have a default case.",
                "disable": false
            },
            {
                "real_name": "MissingFail",
                "display_name": "MissingFail",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Not calling fail() when expecting an exception masks bugs",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Not calling fail() when expecting an exception masks bugs",
                "disable": false
            },
            {
                "real_name": "MissingImplementsComparable",
                "display_name": "MissingImplementsComparable",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Classes implementing valid compareTo function should implement Comparable interface",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Classes implementing valid compareTo function should implement Comparable interface",
                "disable": false
            },
            {
                "real_name": "MissingOverride",
                "display_name": "MissingOverride",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "method overrides method in supertype; expected @Override",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "method overrides method in supertype; expected @Override",
                "disable": false
            },
            {
                "real_name": "MissingSummary",
                "display_name": "MissingSummary",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "A summary line is required on public/protected Javadocs.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "A summary line is required on public/protected Javadocs.",
                "disable": false
            },
            {
                "real_name": "MixedMutabilityReturnType",
                "display_name": "MixedMutabilityReturnType",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This method returns both mutable and immutable collections or maps from different paths. This may be confusing for users of the method.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This method returns both mutable and immutable collections or maps from different paths. This may be confusing for users of the method.",
                "disable": false
            },
            {
                "real_name": "MockNotUsedInProduction",
                "display_name": "MockNotUsedInProduction",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This mock is instantiated and configured, but is never passed to production code. It should be either removed or used.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This mock is instantiated and configured, but is never passed to production code. It should be either removed or used.",
                "disable": false
            },
            {
                "real_name": "ModifiedButNotUsed",
                "display_name": "ModifiedButNotUsed",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "A collection or proto builder was created, but its values were never accessed.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "A collection or proto builder was created, but its values were never accessed.",
                "disable": false
            },
            {
                "real_name": "ModifyCollectionInEnhancedForLoop",
                "display_name": "ModifyCollectionInEnhancedForLoop",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Modifying a collection while iterating over it in a loop may cause a ConcurrentModificationException to be thrown or lead to undefined behavior.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Modifying a collection while iterating over it in a loop may cause a ConcurrentModificationException to be thrown or lead to undefined behavior.",
                "disable": false
            },
            {
                "real_name": "ModifySourceCollectionInStream",
                "display_name": "ModifySourceCollectionInStream",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Modifying the backing source during stream operations may cause unintended results.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Modifying the backing source during stream operations may cause unintended results.",
                "disable": false
            },
            {
                "real_name": "MultipleParallelOrSequentialCalls",
                "display_name": "MultipleParallelOrSequentialCalls",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Multiple calls to either parallel or sequential are unnecessary and cause confusion.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Multiple calls to either parallel or sequential are unnecessary and cause confusion.",
                "disable": false
            },
            {
                "real_name": "MultipleUnaryOperatorsInMethodCall",
                "display_name": "MultipleUnaryOperatorsInMethodCall",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Avoid having multiple unary operators acting on the same variable in a method call",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Avoid having multiple unary operators acting on the same variable in a method call",
                "disable": false
            },
            {
                "real_name": "MutablePublicArray",
                "display_name": "MutablePublicArray",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Non-empty arrays are mutable, so this `public static final` array is not a constant and can be modified by clients of this class. Prefer an ImmutableList, or provide an accessor method that returns a defensive copy.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Non-empty arrays are mutable, so this `public static final` array is not a constant and can be modified by clients of this class. Prefer an ImmutableList, or provide an accessor method that returns a defensive copy.",
                "disable": false
            },
            {
                "real_name": "NarrowCalculation",
                "display_name": "NarrowCalculation",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This calculation may lose precision compared to its target type.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This calculation may lose precision compared to its target type.",
                "disable": false
            },
            {
                "real_name": "NarrowingCompoundAssignment",
                "display_name": "NarrowingCompoundAssignment",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Compound assignments may hide dangerous casts",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Compound assignments may hide dangerous casts",
                "disable": false
            },
            {
                "real_name": "NegativeCharLiteral",
                "display_name": "NegativeCharLiteral",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Casting a negative signed literal to an (unsigned) char might be misleading.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Casting a negative signed literal to an (unsigned) char might be misleading.",
                "disable": false
            },
            {
                "real_name": "NestedInstanceOfConditions",
                "display_name": "NestedInstanceOfConditions",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Nested instanceOf conditions of disjoint types create blocks of code that never execute",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Nested instanceOf conditions of disjoint types create blocks of code that never execute",
                "disable": false
            },
            {
                "real_name": "NewFileSystem",
                "display_name": "NewFileSystem",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Starting in JDK 13, this call is ambiguous with FileSystem.newFileSystem(Path,Map)",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Starting in JDK 13, this call is ambiguous with FileSystem.newFileSystem(Path,Map)",
                "disable": false
            },
            {
                "real_name": "NonAtomicVolatileUpdate",
                "display_name": "NonAtomicVolatileUpdate",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This update of a volatile variable is non-atomic",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This update of a volatile variable is non-atomic",
                "disable": false
            },
            {
                "real_name": "NonCanonicalType",
                "display_name": "NonCanonicalType",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This type is referred to by a non-canonical name, which may be misleading.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This type is referred to by a non-canonical name, which may be misleading.",
                "disable": false
            },
            {
                "real_name": "NonOverridingEquals",
                "display_name": "NonOverridingEquals",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "equals method doesn't override Object.equals",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "equals method doesn't override Object.equals",
                "disable": false
            },
            {
                "real_name": "NullOptional",
                "display_name": "NullOptional",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Passing a literal null to an Optional parameter is almost certainly a mistake. Did you mean to provide an empty Optional?",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Passing a literal null to an Optional parameter is almost certainly a mistake. Did you mean to provide an empty Optional?",
                "disable": false
            },
            {
                "real_name": "NullableConstructor",
                "display_name": "NullableConstructor",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Constructors should not be annotated with @Nullable since they cannot return null",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Constructors should not be annotated with @Nullable since they cannot return null",
                "disable": false
            },
            {
                "real_name": "NullablePrimitive",
                "display_name": "NullablePrimitive",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "@Nullable should not be used for primitive types since they cannot be null",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "@Nullable should not be used for primitive types since they cannot be null",
                "disable": false
            },
            {
                "real_name": "NullablePrimitiveArray",
                "display_name": "NullablePrimitiveArray",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "@Nullable type annotations should not be used for primitive types since they cannot be null",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "@Nullable type annotations should not be used for primitive types since they cannot be null",
                "disable": false
            },
            {
                "real_name": "NullableVoid",
                "display_name": "NullableVoid",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "void-returning methods should not be annotated with @Nullable, since they cannot return null",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "void-returning methods should not be annotated with @Nullable, since they cannot return null",
                "disable": false
            },
            {
                "real_name": "ObjectEqualsForPrimitives",
                "display_name": "ObjectEqualsForPrimitives",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Avoid unnecessary boxing by using plain == for primitive types.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Avoid unnecessary boxing by using plain == for primitive types.",
                "disable": false
            },
            {
                "real_name": "ObjectToString",
                "display_name": "ObjectToString",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Calling toString on Objects that don't override toString() doesn't provide useful information",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Calling toString on Objects that don't override toString() doesn't provide useful information",
                "disable": false
            },
            {
                "real_name": "ObjectsHashCodePrimitive",
                "display_name": "ObjectsHashCodePrimitive",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Objects.hashCode(Object o) should not be passed a primitive value",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Objects.hashCode(Object o) should not be passed a primitive value",
                "disable": false
            },
            {
                "real_name": "OperatorPrecedence",
                "display_name": "OperatorPrecedence",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Use grouping parenthesis to make the operator precedence explicit",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Use grouping parenthesis to make the operator precedence explicit",
                "disable": false
            },
            {
                "real_name": "OptionalMapToOptional",
                "display_name": "OptionalMapToOptional",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Mapping to another Optional will yield a nested Optional. Did you mean flatMap?",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Mapping to another Optional will yield a nested Optional. Did you mean flatMap?",
                "disable": false
            },
            {
                "real_name": "OptionalNotPresent",
                "display_name": "OptionalNotPresent",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This Optional has been confirmed to be empty at this point, so the call to `get()` or `orElseThrow()` will always throw.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This Optional has been confirmed to be empty at this point, so the call to `get()` or `orElseThrow()` will always throw.",
                "disable": false
            },
            {
                "real_name": "OrphanedFormatString",
                "display_name": "OrphanedFormatString",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "String literal contains format specifiers, but is not passed to a format method",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "String literal contains format specifiers, but is not passed to a format method",
                "disable": false
            },
            {
                "real_name": "OutlineNone",
                "display_name": "OutlineNone",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Setting CSS outline style to none or 0 (while not otherwise providing visual focus indicators) is inaccessible for users navigating a web page without a mouse.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Setting CSS outline style to none or 0 (while not otherwise providing visual focus indicators) is inaccessible for users navigating a web page without a mouse.",
                "disable": false
            },
            {
                "real_name": "OverrideThrowableToString",
                "display_name": "OverrideThrowableToString",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "To return a custom message with a Throwable class, one should override getMessage() instead of toString().",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "To return a custom message with a Throwable class, one should override getMessage() instead of toString().",
                "disable": false
            },
            {
                "real_name": "Overrides",
                "display_name": "Overrides",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Varargs doesn't agree for overridden method",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Varargs doesn't agree for overridden method",
                "disable": false
            },
            {
                "real_name": "OverridesGuiceInjectableMethod",
                "display_name": "OverridesGuiceInjectableMethod",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This method is not annotated with @Inject, but it overrides a method that is annotated with @com.google.inject.Inject. Guice will inject this method, and it is recommended to annotate it explicitly.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This method is not annotated with @Inject, but it overrides a method that is annotated with @com.google.inject.Inject. Guice will inject this method, and it is recommended to annotate it explicitly.",
                "disable": false
            },
            {
                "real_name": "ParameterName",
                "display_name": "ParameterName",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Detects `/* name= */`-style comments on actual parameters where the name doesn't match the formal parameter",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Detects `/* name= */`-style comments on actual parameters where the name doesn't match the formal parameter",
                "disable": false
            },
            {
                "real_name": "PreconditionsCheckNotNullRepeated",
                "display_name": "PreconditionsCheckNotNullRepeated",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Including the first argument of checkNotNull in the failure message is not useful, as it will always be `null`.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Including the first argument of checkNotNull in the failure message is not useful, as it will always be `null`.",
                "disable": false
            },
            {
                "real_name": "PrimitiveAtomicReference",
                "display_name": "PrimitiveAtomicReference",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Using compareAndSet with boxed primitives is dangerous, as reference rather than value equality is used. Consider using AtomicInteger, AtomicLong, AtomicBoolean from JDK or AtomicDouble from Guava instead.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Using compareAndSet with boxed primitives is dangerous, as reference rather than value equality is used. Consider using AtomicInteger, AtomicLong, AtomicBoolean from JDK or AtomicDouble from Guava instead.",
                "disable": false
            },
            {
                "real_name": "ProtectedMembersInFinalClass",
                "display_name": "ProtectedMembersInFinalClass",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Protected members in final classes can be package-private",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Protected members in final classes can be package-private",
                "disable": false
            },
            {
                "real_name": "ProtoDurationGetSecondsGetNano",
                "display_name": "ProtoDurationGetSecondsGetNano",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "getNanos() only accesses the underlying nanosecond-adjustment of the duration.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "getNanos() only accesses the underlying nanosecond-adjustment of the duration.",
                "disable": false
            },
            {
                "real_name": "ProtoRedundantSet",
                "display_name": "ProtoRedundantSet",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "A field on a protocol buffer was set twice in the same chained expression.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "A field on a protocol buffer was set twice in the same chained expression.",
                "disable": false
            },
            {
                "real_name": "ProtoTimestampGetSecondsGetNano",
                "display_name": "ProtoTimestampGetSecondsGetNano",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "getNanos() only accesses the underlying nanosecond-adjustment of the instant.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "getNanos() only accesses the underlying nanosecond-adjustment of the instant.",
                "disable": false
            },
            {
                "real_name": "QualifierOrScopeOnInjectMethod",
                "display_name": "QualifierOrScopeOnInjectMethod",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Qualifiers/Scope annotations on @Inject methods don't have any effect. Move the qualifier annotation to the binding location.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Qualifiers/Scope annotations on @Inject methods don't have any effect. Move the qualifier annotation to the binding location.",
                "disable": false
            },
            {
                "real_name": "ReachabilityFenceUsage",
                "display_name": "ReachabilityFenceUsage",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "reachabilityFence should always be called inside a finally block",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "reachabilityFence should always be called inside a finally block",
                "disable": false
            },
            {
                "real_name": "ReferenceEquality",
                "display_name": "ReferenceEquality",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Comparison using reference equality instead of value equality",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Comparison using reference equality instead of value equality",
                "disable": false
            },
            {
                "real_name": "RethrowReflectiveOperationExceptionAsLinkageError",
                "display_name": "RethrowReflectiveOperationExceptionAsLinkageError",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Prefer LinkageError for rethrowing ReflectiveOperationException as unchecked",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Prefer LinkageError for rethrowing ReflectiveOperationException as unchecked",
                "disable": false
            },
            {
                "real_name": "ReturnFromVoid",
                "display_name": "ReturnFromVoid",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Void methods should not have a @return tag.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Void methods should not have a @return tag.",
                "disable": false
            },
            {
                "real_name": "RobolectricShadowDirectlyOn",
                "display_name": "RobolectricShadowDirectlyOn",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Migrate off a deprecated overload of org.robolectric.shadow.api.Shadow#directlyOn",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Migrate off a deprecated overload of org.robolectric.shadow.api.Shadow#directlyOn",
                "disable": false
            },
            {
                "real_name": "RxReturnValueIgnored",
                "display_name": "RxReturnValueIgnored",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Returned Rx objects must be checked. Ignoring a returned Rx value means it is never scheduled for execution",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Returned Rx objects must be checked. Ignoring a returned Rx value means it is never scheduled for execution",
                "disable": false
            },
            {
                "real_name": "SameNameButDifferent",
                "display_name": "SameNameButDifferent",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This type name shadows another in a way that may be confusing.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This type name shadows another in a way that may be confusing.",
                "disable": false
            },
            {
                "real_name": "SelfAlwaysReturnsThis",
                "display_name": "SelfAlwaysReturnsThis",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Non-abstract instance methods named 'self()' or 'getThis()' that return the enclosing class must always 'return this'",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Non-abstract instance methods named 'self()' or 'getThis()' that return the enclosing class must always 'return this'",
                "disable": false
            },
            {
                "real_name": "ShortCircuitBoolean",
                "display_name": "ShortCircuitBoolean",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Prefer the short-circuiting boolean operators && and || to & and |.",
                "disable": false
            },
            {
                "real_name": "StaticAssignmentInConstructor",
                "display_name": "StaticAssignmentInConstructor",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This assignment is to a static field. Mutating static state from a constructor is highly error-prone.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This assignment is to a static field. Mutating static state from a constructor is highly error-prone.",
                "disable": false
            },
            {
                "real_name": "StaticAssignmentOfThrowable",
                "display_name": "StaticAssignmentOfThrowable",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Saving instances of Throwable in static fields is discouraged, prefer to create them on-demand when an exception is thrown",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Saving instances of Throwable in static fields is discouraged, prefer to create them on-demand when an exception is thrown",
                "disable": false
            },
            {
                "real_name": "StaticGuardedByInstance",
                "display_name": "StaticGuardedByInstance",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Writes to static fields should not be guarded by instance locks",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Writes to static fields should not be guarded by instance locks",
                "disable": false
            },
            {
                "real_name": "StaticMockMember",
                "display_name": "StaticMockMember",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "@Mock members of test classes shouldn't share state between tests and preferably be non-static",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "@Mock members of test classes shouldn't share state between tests and preferably be non-static",
                "disable": false
            },
            {
                "real_name": "StreamResourceLeak",
                "display_name": "StreamResourceLeak",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Streams that encapsulate a closeable resource should be closed using try-with-resources",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Streams that encapsulate a closeable resource should be closed using try-with-resources",
                "disable": false
            },
            {
                "real_name": "StreamToIterable",
                "display_name": "StreamToIterable",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Using stream::iterator creates a one-shot Iterable, which may cause surprising failures.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Using stream::iterator creates a one-shot Iterable, which may cause surprising failures.",
                "disable": false
            },
            {
                "real_name": "StringSplitter",
                "display_name": "StringSplitter",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "String.split(String) has surprising behavior",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "String.split(String) has surprising behavior",
                "disable": false
            },
            {
                "real_name": "SwigMemoryLeak",
                "display_name": "SwigMemoryLeak",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "SWIG generated code that can't call a C++ destructor will leak memory",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "SWIG generated code that can't call a C++ destructor will leak memory",
                "disable": false
            },
            {
                "real_name": "SynchronizeOnNonFinalField",
                "display_name": "SynchronizeOnNonFinalField",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Synchronizing on non-final fields is not safe: if the field is ever updated, different threads may end up locking on different objects.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Synchronizing on non-final fields is not safe: if the field is ever updated, different threads may end up locking on different objects.",
                "disable": false
            },
            {
                "real_name": "ThreadJoinLoop",
                "display_name": "ThreadJoinLoop",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Thread.join needs to be immediately surrounded by a loop until it succeeds. Consider using Uninterruptibles.joinUninterruptibly.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Thread.join needs to be immediately surrounded by a loop until it succeeds. Consider using Uninterruptibles.joinUninterruptibly.",
                "disable": false
            },
            {
                "real_name": "ThreadLocalUsage",
                "display_name": "ThreadLocalUsage",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "ThreadLocals should be stored in static fields",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "ThreadLocals should be stored in static fields",
                "disable": false
            },
            {
                "real_name": "ThreadPriorityCheck",
                "display_name": "ThreadPriorityCheck",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Relying on the thread scheduler is discouraged.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Relying on the thread scheduler is discouraged.",
                "disable": false
            },
            {
                "real_name": "ThreeLetterTimeZoneID",
                "display_name": "ThreeLetterTimeZoneID",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Three-letter time zone identifiers are deprecated, may be ambiguous, and might not do what you intend; the full IANA time zone ID should be used instead.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Three-letter time zone identifiers are deprecated, may be ambiguous, and might not do what you intend; the full IANA time zone ID should be used instead.",
                "disable": false
            },
            {
                "real_name": "TimeUnitConversionChecker",
                "display_name": "TimeUnitConversionChecker",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This TimeUnit conversion looks buggy: converting from a smaller unit to a larger unit (and passing a constant), converting to/from the same TimeUnit, or converting TimeUnits where the result is statically known to be 0 or 1 are all buggy patterns.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This TimeUnit conversion looks buggy: converting from a smaller unit to a larger unit (and passing a constant), converting to/from the same TimeUnit, or converting TimeUnits where the result is statically known to be 0 or 1 are all buggy patterns.",
                "disable": false
            },
            {
                "real_name": "ToStringReturnsNull",
                "display_name": "ToStringReturnsNull",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "An implementation of Object.toString() should never return null.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "An implementation of Object.toString() should never return null.",
                "disable": false
            },
            {
                "real_name": "TruthAssertExpected",
                "display_name": "TruthAssertExpected",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "The actual and expected values appear to be swapped, which results in poor assertion failure messages. The actual value should come first.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The actual and expected values appear to be swapped, which results in poor assertion failure messages. The actual value should come first.",
                "disable": false
            },
            {
                "real_name": "TruthConstantAsserts",
                "display_name": "TruthConstantAsserts",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Truth Library assert is called on a constant.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Truth Library assert is called on a constant.",
                "disable": false
            },
            {
                "real_name": "TruthGetOrDefault",
                "display_name": "TruthGetOrDefault",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Asserting on getOrDefault is unclear; prefer containsEntry or doesNotContainKey",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Asserting on getOrDefault is unclear; prefer containsEntry or doesNotContainKey",
                "disable": false
            },
            {
                "real_name": "TruthIncompatibleType",
                "display_name": "TruthIncompatibleType",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Argument is not compatible with the subject's type.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Argument is not compatible with the subject's type.",
                "disable": false
            },
            {
                "real_name": "TypeEquals",
                "display_name": "TypeEquals",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "com.sun.tools.javac.code.Type doesn't override Object.equals and instances are not interned by javac, so testing types for equality should be done with Types#isSameType instead",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "com.sun.tools.javac.code.Type doesn't override Object.equals and instances are not interned by javac, so testing types for equality should be done with Types#isSameType instead",
                "disable": false
            },
            {
                "real_name": "TypeNameShadowing",
                "display_name": "TypeNameShadowing",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Type parameter declaration shadows another named type",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Type parameter declaration shadows another named type",
                "disable": false
            },
            {
                "real_name": "TypeParameterShadowing",
                "display_name": "TypeParameterShadowing",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Type parameter declaration overrides another type parameter already declared",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Type parameter declaration overrides another type parameter already declared",
                "disable": false
            },
            {
                "real_name": "TypeParameterUnusedInFormals",
                "display_name": "TypeParameterUnusedInFormals",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.",
                "disable": false
            },
            {
                "real_name": "URLEqualsHashCode",
                "display_name": "URLEqualsHashCode",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Avoid hash-based containers of java.net.URL\u2013the containers rely on equals() and hashCode(), which cause java.net.URL to make blocking internet connections.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Avoid hash-based containers of java.net.URL\u2013the containers rely on equals() and hashCode(), which cause java.net.URL to make blocking internet connections.",
                "disable": false
            },
            {
                "real_name": "UndefinedEquals",
                "display_name": "UndefinedEquals",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This type is not guaranteed to implement a useful #equals method.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This type is not guaranteed to implement a useful #equals method.",
                "disable": false
            },
            {
                "real_name": "UnicodeEscape",
                "display_name": "UnicodeEscape",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Using unicode escape sequences for printable ASCII characters is obfuscated, and potentially dangerous.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Using unicode escape sequences for printable ASCII characters is obfuscated, and potentially dangerous.",
                "disable": false
            },
            {
                "real_name": "UnnecessaryAssignment",
                "display_name": "UnnecessaryAssignment",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Fields annotated with @Inject/@Mock should not be manually assigned to, as they should be initialized by a framework. Remove the assignment if a framework is being used, or the annotation if one isn't.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Fields annotated with @Inject/@Mock should not be manually assigned to, as they should be initialized by a framework. Remove the assignment if a framework is being used, or the annotation if one isn't.",
                "disable": false
            },
            {
                "real_name": "UnnecessaryLambda",
                "display_name": "UnnecessaryLambda",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Returning a lambda from a helper method or saving it in a constant is unnecessary; prefer to implement the functional interface method directly and use a method reference instead.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Returning a lambda from a helper method or saving it in a constant is unnecessary; prefer to implement the functional interface method directly and use a method reference instead.",
                "disable": false
            },
            {
                "real_name": "UnnecessaryLongToIntConversion",
                "display_name": "UnnecessaryLongToIntConversion",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Converting a long or Long to an int to pass as a long parameter is usually not necessary. If this conversion is intentional, consider `Longs.constrainToRange()` instead.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Converting a long or Long to an int to pass as a long parameter is usually not necessary. If this conversion is intentional, consider `Longs.constrainToRange()` instead.",
                "disable": false
            },
            {
                "real_name": "UnnecessaryMethodInvocationMatcher",
                "display_name": "UnnecessaryMethodInvocationMatcher",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "It is not necessary to wrap a MethodMatcher with methodInvocation().",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "It is not necessary to wrap a MethodMatcher with methodInvocation().",
                "disable": false
            },
            {
                "real_name": "UnnecessaryMethodReference",
                "display_name": "UnnecessaryMethodReference",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This method reference is unnecessary, and can be replaced with the variable itself.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This method reference is unnecessary, and can be replaced with the variable itself.",
                "disable": false
            },
            {
                "real_name": "UnnecessaryParentheses",
                "display_name": "UnnecessaryParentheses",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "These grouping parentheses are unnecessary; it is unlikely the code will be misinterpreted without them",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "These grouping parentheses are unnecessary; it is unlikely the code will be misinterpreted without them",
                "disable": false
            },
            {
                "real_name": "UnqualifiedYield",
                "display_name": "UnqualifiedYield",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "In recent versions of Java, 'yield' is a contextual keyword, and calling an unqualified method with that name is an error.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "In recent versions of Java, 'yield' is a contextual keyword, and calling an unqualified method with that name is an error.",
                "disable": false
            },
            {
                "real_name": "UnrecognisedJavadocTag",
                "display_name": "UnrecognisedJavadocTag",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This Javadoc tag wasn't recognised by the parser. Is it malformed somehow, perhaps with mismatched braces?",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This Javadoc tag wasn't recognised by the parser. Is it malformed somehow, perhaps with mismatched braces?",
                "disable": false
            },
            {
                "real_name": "UnsafeFinalization",
                "display_name": "UnsafeFinalization",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Finalizer may run before native code finishes execution",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Finalizer may run before native code finishes execution",
                "disable": false
            },
            {
                "real_name": "UnsafeReflectiveConstructionCast",
                "display_name": "UnsafeReflectiveConstructionCast",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Prefer `asSubclass` instead of casting the result of `newInstance`, to detect classes of incorrect type before invoking their constructors.This way, if the class is of the incorrect type,it will throw an exception before invoking its constructor.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Prefer `asSubclass` instead of casting the result of `newInstance`, to detect classes of incorrect type before invoking their constructors.This way, if the class is of the incorrect type,it will throw an exception before invoking its constructor.",
                "disable": false
            },
            {
                "real_name": "UnsynchronizedOverridesSynchronized",
                "display_name": "UnsynchronizedOverridesSynchronized",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Unsynchronized method overrides a synchronized method.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Unsynchronized method overrides a synchronized method.",
                "disable": false
            },
            {
                "real_name": "UnusedLabel",
                "display_name": "UnusedLabel",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This label is unused.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This label is unused.",
                "disable": false
            },
            {
                "real_name": "UnusedMethod",
                "display_name": "UnusedMethod",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Unused.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Unused.",
                "disable": false
            },
            {
                "real_name": "UnusedNestedClass",
                "display_name": "UnusedNestedClass",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This nested class is unused, and can be removed.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This nested class is unused, and can be removed.",
                "disable": false
            },
            {
                "real_name": "UnusedTypeParameter",
                "display_name": "UnusedTypeParameter",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "This type parameter is unused and can be removed.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This type parameter is unused and can be removed.",
                "disable": false
            },
            {
                "real_name": "UnusedVariable",
                "display_name": "UnusedVariable",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Unused.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Unused.",
                "disable": false
            },
            {
                "real_name": "UseBinds",
                "display_name": "UseBinds",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "@Binds is a more efficient and declarative mechanism for delegating a binding.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "@Binds is a more efficient and declarative mechanism for delegating a binding.",
                "disable": false
            },
            {
                "real_name": "UseCorrectAssertInTests",
                "display_name": "UseCorrectAssertInTests",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Java assert is used in testing code. For testing purposes, prefer using Truth-based assertions.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Java assert is used in testing code. For testing purposes, prefer using Truth-based assertions.",
                "disable": false
            },
            {
                "real_name": "VariableNameSameAsType",
                "display_name": "VariableNameSameAsType",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "variableName and type with the same name would refer to the static field instead of the class",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "variableName and type with the same name would refer to the static field instead of the class",
                "disable": false
            },
            {
                "real_name": "WaitNotInLoop",
                "display_name": "WaitNotInLoop",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Because of spurious wakeups, Object.wait() and Condition.await() must always be called in a loop",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Because of spurious wakeups, Object.wait() and Condition.await() must always be called in a loop",
                "disable": false
            },
            {
                "real_name": "WakelockReleasedDangerously",
                "display_name": "WakelockReleasedDangerously",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "A wakelock acquired with a timeout may be released by the system before calling `release`, even after checking `isHeld()`. If so, it will throw a RuntimeException. Please wrap in a try/catch block.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "A wakelock acquired with a timeout may be released by the system before calling `release`, even after checking `isHeld()`. If so, it will throw a RuntimeException. Please wrap in a try/catch block.",
                "disable": false
            },
            {
                "real_name": "WithSignatureDiscouraged",
                "display_name": "WithSignatureDiscouraged",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "withSignature is discouraged. Prefer .named and/or .withParameters where possible.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "withSignature is discouraged. Prefer .named and/or .withParameters where possible.",
                "disable": false
            },
            {
                "real_name": "Experimental : ERROR",
                "display_name": "Experimental : ERROR",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "AndroidJdkLibsChecker",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "AndroidJdkLibsChecker",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "AutoFactoryAtInject",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "AutoFactoryAtInject",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "BanSerializableRead",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "BanSerializableRead",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "ClassName",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "ClassName",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "ComparisonContractViolated",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "ComparisonContractViolated",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "DeduplicateConstants",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "DeduplicateConstants",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "DepAnn",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "DepAnn",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "EmptyIf",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "EmptyIf",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "ExtendsAutoValue",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "ExtendsAutoValue",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "InjectMoreThanOneQualifier",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "InjectMoreThanOneQualifier",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "InjectScopeOrQualifierAnnotationRetention",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "InjectScopeOrQualifierAnnotationRetention",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "InsecureCryptoUsage",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "InsecureCryptoUsage",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "IterablePathParameter",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "IterablePathParameter",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Java7ApiChecker",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Java7ApiChecker",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "Java8ApiChecker",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Java8ApiChecker",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "LongLiteralLowerCaseSuffix",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "LongLiteralLowerCaseSuffix",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "NoAllocation",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "NoAllocation",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "RefersToDaggerCodegen",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "RefersToDaggerCodegen",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "StaticOrDefaultInterfaceMethod",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "StaticOrDefaultInterfaceMethod",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "StaticQualifiedUsingExpression",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "StaticQualifiedUsingExpression",
                "disable": false
            },
            {
                "real_name": "",
                "display_name": "",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "SystemExitOutsideMain",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "SystemExitOutsideMain",
                "disable": false
            },
            {
                "real_name": "AlwaysThrows",
                "display_name": "AlwaysThrows",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Detects calls that will fail at runtime",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Detects calls that will fail at runtime",
                "disable": false
            },
            {
                "real_name": "AndroidInjectionBeforeSuper",
                "display_name": "AndroidInjectionBeforeSuper",
                "severity": "error",
                "category": "correctness",
                "rule_title": "AndroidInjection.inject() should always be invoked before calling super.lifecycleMethod()",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "AndroidInjection.inject() should always be invoked before calling super.lifecycleMethod()",
                "disable": false
            },
            {
                "real_name": "ArrayEquals",
                "display_name": "ArrayEquals",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Reference equality used to compare arrays",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Reference equality used to compare arrays",
                "disable": false
            },
            {
                "real_name": "ArrayFillIncompatibleType",
                "display_name": "ArrayFillIncompatibleType",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Arrays.fill(Object[], Object) called with incompatible types.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Arrays.fill(Object[], Object) called with incompatible types.",
                "disable": false
            },
            {
                "real_name": "ArrayHashCode",
                "display_name": "ArrayHashCode",
                "severity": "error",
                "category": "correctness",
                "rule_title": "hashcode method on array does not hash array contents",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "hashcode method on array does not hash array contents",
                "disable": false
            },
            {
                "real_name": "ArrayToString",
                "display_name": "ArrayToString",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Calling toString on an array does not provide useful information",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Calling toString on an array does not provide useful information",
                "disable": false
            },
            {
                "real_name": "ArraysAsListPrimitiveArray",
                "display_name": "ArraysAsListPrimitiveArray",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Arrays.asList does not autobox primitive arrays, as one might expect.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Arrays.asList does not autobox primitive arrays, as one might expect.",
                "disable": false
            },
            {
                "real_name": "AsyncCallableReturnsNull",
                "display_name": "AsyncCallableReturnsNull",
                "severity": "error",
                "category": "correctness",
                "rule_title": "AsyncCallable should not return a null Future, only a Future whose result is null.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "AsyncCallable should not return a null Future, only a Future whose result is null.",
                "disable": false
            },
            {
                "real_name": "AsyncFunctionReturnsNull",
                "display_name": "AsyncFunctionReturnsNull",
                "severity": "error",
                "category": "correctness",
                "rule_title": "AsyncFunction should not return a null Future, only a Future whose result is null.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "AsyncFunction should not return a null Future, only a Future whose result is null.",
                "disable": false
            },
            {
                "real_name": "AutoValueBuilderDefaultsInConstructor",
                "display_name": "AutoValueBuilderDefaultsInConstructor",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Defaults for AutoValue Builders should be set in the factory method returning Builder instances, not the constructor",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Defaults for AutoValue Builders should be set in the factory method returning Builder instances, not the constructor",
                "disable": false
            },
            {
                "real_name": "AutoValueConstructorOrderChecker",
                "display_name": "AutoValueConstructorOrderChecker",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Arguments to AutoValue constructor are in the wrong order",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Arguments to AutoValue constructor are in the wrong order",
                "disable": false
            },
            {
                "real_name": "BadAnnotationImplementation",
                "display_name": "BadAnnotationImplementation",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Classes that implement Annotation must override equals and hashCode. Consider using AutoAnnotation instead of implementing Annotation by hand.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Classes that implement Annotation must override equals and hashCode. Consider using AutoAnnotation instead of implementing Annotation by hand.",
                "disable": false
            },
            {
                "real_name": "BadShiftAmount",
                "display_name": "BadShiftAmount",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Shift by an amount that is out of range",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Shift by an amount that is out of range",
                "disable": false
            },
            {
                "real_name": "BanJNDI",
                "display_name": "BanJNDI",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Using JNDI may deserialize user input via the `Serializable` API which is extremely dangerous",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Using JNDI may deserialize user input via the `Serializable` API which is extremely dangerous",
                "disable": false
            },
            {
                "real_name": "BoxedPrimitiveEquality",
                "display_name": "BoxedPrimitiveEquality",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Comparison using reference equality instead of value equality. Reference equality of boxed primitive types is usually not useful, as they are value objects, and it is bug-prone, as instances are cached for some values but not others.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Comparison using reference equality instead of value equality. Reference equality of boxed primitive types is usually not useful, as they are value objects, and it is bug-prone, as instances are cached for some values but not others.",
                "disable": false
            },
            {
                "real_name": "BundleDeserializationCast",
                "display_name": "BundleDeserializationCast",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Object serialized in Bundle may have been flattened to base type.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Object serialized in Bundle may have been flattened to base type.",
                "disable": false
            },
            {
                "real_name": "ChainingConstructorIgnoresParameter",
                "display_name": "ChainingConstructorIgnoresParameter",
                "severity": "error",
                "category": "correctness",
                "rule_title": "The called constructor accepts a parameter with the same name and type as one of its caller's parameters, but its caller doesn't pass that parameter to it. It's likely that it was intended to.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The called constructor accepts a parameter with the same name and type as one of its caller's parameters, but its caller doesn't pass that parameter to it. It's likely that it was intended to.",
                "disable": false
            },
            {
                "real_name": "CheckNotNullMultipleTimes",
                "display_name": "CheckNotNullMultipleTimes",
                "severity": "error",
                "category": "correctness",
                "rule_title": "A variable was checkNotNulled multiple times. Did you mean to check something else?",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "A variable was checkNotNulled multiple times. Did you mean to check something else?",
                "disable": false
            },
            {
                "real_name": "CheckReturnValue",
                "display_name": "CheckReturnValue",
                "severity": "error",
                "category": "correctness",
                "rule_title": "The result of this call must be used",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The result of this call must be used",
                "disable": false
            },
            {
                "real_name": "CollectionIncompatibleType",
                "display_name": "CollectionIncompatibleType",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Incompatible type as argument to Object-accepting Java collections method",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Incompatible type as argument to Object-accepting Java collections method",
                "disable": false
            },
            {
                "real_name": "CollectionToArraySafeParameter",
                "display_name": "CollectionToArraySafeParameter",
                "severity": "error",
                "category": "correctness",
                "rule_title": "The type of the array parameter of Collection.toArray needs to be compatible with the array type",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The type of the array parameter of Collection.toArray needs to be compatible with the array type",
                "disable": false
            },
            {
                "real_name": "ComparableType",
                "display_name": "ComparableType",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Implementing 'Comparable<T>' where T is not the same as the implementing class is incorrect, since it violates the symmetry contract of compareTo.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Implementing 'Comparable<T>' where T is not the same as the implementing class is incorrect, since it violates the symmetry contract of compareTo.",
                "disable": false
            },
            {
                "real_name": "ComparingThisWithNull",
                "display_name": "ComparingThisWithNull",
                "severity": "error",
                "category": "correctness",
                "rule_title": "this == null is always false, this != null is always true",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "this == null is always false, this != null is always true",
                "disable": false
            },
            {
                "real_name": "ComparisonOutOfRange",
                "display_name": "ComparisonOutOfRange",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Comparison to value that is out of range for the compared type",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Comparison to value that is out of range for the compared type",
                "disable": false
            },
            {
                "real_name": "CompatibleWithAnnotationMisuse",
                "display_name": "CompatibleWithAnnotationMisuse",
                "severity": "error",
                "category": "correctness",
                "rule_title": "@CompatibleWith's value is not a type argument.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "@CompatibleWith's value is not a type argument.",
                "disable": false
            },
            {
                "real_name": "CompileTimeConstant",
                "display_name": "CompileTimeConstant",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Non-compile-time constant expression passed to parameter with @CompileTimeConstant type annotation.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Non-compile-time constant expression passed to parameter with @CompileTimeConstant type annotation.",
                "disable": false
            },
            {
                "real_name": "ComputeIfAbsentAmbiguousReference",
                "display_name": "ComputeIfAbsentAmbiguousReference",
                "severity": "error",
                "category": "correctness",
                "rule_title": "computeIfAbsent passes the map key to the provided class's constructor",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "computeIfAbsent passes the map key to the provided class's constructor",
                "disable": false
            },
            {
                "real_name": "ConditionalExpressionNumericPromotion",
                "display_name": "ConditionalExpressionNumericPromotion",
                "severity": "error",
                "category": "correctness",
                "rule_title": "A conditional expression with numeric operands of differing types will perform binary numeric promotion of the operands; when these operands are of reference types, the expression's result may not be of the expected type.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "A conditional expression with numeric operands of differing types will perform binary numeric promotion of the operands; when these operands are of reference types, the expression's result may not be of the expected type.",
                "disable": false
            },
            {
                "real_name": "ConstantOverflow",
                "display_name": "ConstantOverflow",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Compile-time constant expression overflows",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Compile-time constant expression overflows",
                "disable": false
            },
            {
                "real_name": "DaggerProvidesNull",
                "display_name": "DaggerProvidesNull",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Dagger @Provides methods may not return null unless annotated with @Nullable",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Dagger @Provides methods may not return null unless annotated with @Nullable",
                "disable": false
            },
            {
                "real_name": "DangerousLiteralNull",
                "display_name": "DangerousLiteralNull",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This method is null-hostile: passing a null literal to it is always wrong",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This method is null-hostile: passing a null literal to it is always wrong",
                "disable": false
            },
            {
                "real_name": "DeadException",
                "display_name": "DeadException",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Exception created but not thrown",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Exception created but not thrown",
                "disable": false
            },
            {
                "real_name": "DeadThread",
                "display_name": "DeadThread",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Thread created but not started",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Thread created but not started",
                "disable": false
            },
            {
                "real_name": "DiscardedPostfixExpression",
                "display_name": "DiscardedPostfixExpression",
                "severity": "error",
                "category": "correctness",
                "rule_title": "The result of this unary operation on a lambda parameter is discarded",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The result of this unary operation on a lambda parameter is discarded",
                "disable": false
            },
            {
                "real_name": "DoNotCall",
                "display_name": "DoNotCall",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This method should not be called.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This method should not be called.",
                "disable": false
            },
            {
                "real_name": "DoNotMock",
                "display_name": "DoNotMock",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Identifies undesirable mocks.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Identifies undesirable mocks.",
                "disable": false
            },
            {
                "real_name": "DoubleBraceInitialization",
                "display_name": "DoubleBraceInitialization",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Prefer collection factory methods or builders to the double-brace initialization pattern.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Prefer collection factory methods or builders to the double-brace initialization pattern.",
                "disable": false
            },
            {
                "real_name": "DuplicateMapKeys",
                "display_name": "DuplicateMapKeys",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Map#ofEntries will throw an IllegalArgumentException if there are any duplicate keys",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Map#ofEntries will throw an IllegalArgumentException if there are any duplicate keys",
                "disable": false
            },
            {
                "real_name": "DurationFrom",
                "display_name": "DurationFrom",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Duration.from(Duration) returns itself; from(Period) throws a runtime exception.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Duration.from(Duration) returns itself; from(Period) throws a runtime exception.",
                "disable": false
            },
            {
                "real_name": "DurationGetTemporalUnit",
                "display_name": "DurationGetTemporalUnit",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Duration.get() only works with SECONDS or NANOS.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Duration.get() only works with SECONDS or NANOS.",
                "disable": false
            },
            {
                "real_name": "DurationTemporalUnit",
                "display_name": "DurationTemporalUnit",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Duration APIs only work for DAYS or exact durations.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Duration APIs only work for DAYS or exact durations.",
                "disable": false
            },
            {
                "real_name": "DurationToLongTimeUnit",
                "display_name": "DurationToLongTimeUnit",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Unit mismatch when decomposing a Duration or Instant to call a <long, TimeUnit> API",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Unit mismatch when decomposing a Duration or Instant to call a <long, TimeUnit> API",
                "disable": false
            },
            {
                "real_name": "EqualsHashCode",
                "display_name": "EqualsHashCode",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Classes that override equals should also override hashCode.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Classes that override equals should also override hashCode.",
                "disable": false
            },
            {
                "real_name": "EqualsNaN",
                "display_name": "EqualsNaN",
                "severity": "error",
                "category": "correctness",
                "rule_title": "== NaN always returns false; use the isNaN methods instead",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "== NaN always returns false; use the isNaN methods instead",
                "disable": false
            },
            {
                "real_name": "EqualsNull",
                "display_name": "EqualsNull",
                "severity": "error",
                "category": "correctness",
                "rule_title": "The contract of Object.equals() states that for any non-null reference value x, x.equals(null) should return false. If x is null, a NullPointerException is thrown. Consider replacing equals() with the == operator.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The contract of Object.equals() states that for any non-null reference value x, x.equals(null) should return false. If x is null, a NullPointerException is thrown. Consider replacing equals() with the == operator.",
                "disable": false
            },
            {
                "real_name": "EqualsReference",
                "display_name": "EqualsReference",
                "severity": "error",
                "category": "correctness",
                "rule_title": "== must be used in equals method to check equality to itself or an infinite loop will occur.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "== must be used in equals method to check equality to itself or an infinite loop will occur.",
                "disable": false
            },
            {
                "real_name": "EqualsWrongThing",
                "display_name": "EqualsWrongThing",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Comparing different pairs of fields/getters in an equals implementation is probably a mistake.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Comparing different pairs of fields/getters in an equals implementation is probably a mistake.",
                "disable": false
            },
            {
                "real_name": "FloggerFormatString",
                "display_name": "FloggerFormatString",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Invalid printf-style format string",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Invalid printf-style format string",
                "disable": false
            },
            {
                "real_name": "FloggerLogString",
                "display_name": "FloggerLogString",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Arguments to log(String) must be compile-time constants or parameters annotated with @CompileTimeConstant. If possible, use Flogger's formatting log methods instead.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Arguments to log(String) must be compile-time constants or parameters annotated with @CompileTimeConstant. If possible, use Flogger's formatting log methods instead.",
                "disable": false
            },
            {
                "real_name": "FloggerLogVarargs",
                "display_name": "FloggerLogVarargs",
                "severity": "error",
                "category": "correctness",
                "rule_title": "logVarargs should be used to pass through format strings and arguments.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "logVarargs should be used to pass through format strings and arguments.",
                "disable": false
            },
            {
                "real_name": "FloggerSplitLogStatement",
                "display_name": "FloggerSplitLogStatement",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Splitting log statements and using Api instances directly breaks logging.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Splitting log statements and using Api instances directly breaks logging.",
                "disable": false
            },
            {
                "real_name": "ForOverride",
                "display_name": "ForOverride",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Method annotated @ForOverride must be protected or package-private and only invoked from declaring class, or from an override of the method",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Method annotated @ForOverride must be protected or package-private and only invoked from declaring class, or from an override of the method",
                "disable": false
            },
            {
                "real_name": "FormatString",
                "display_name": "FormatString",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Invalid printf-style format string",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Invalid printf-style format string",
                "disable": false
            },
            {
                "real_name": "FormatStringAnnotation",
                "display_name": "FormatStringAnnotation",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Invalid format string passed to formatting method.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Invalid format string passed to formatting method.",
                "disable": false
            },
            {
                "real_name": "FromTemporalAccessor",
                "display_name": "FromTemporalAccessor",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Certain combinations of javaTimeType.from(TemporalAccessor) will always throw a DateTimeException or return the parameter directly.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Certain combinations of javaTimeType.from(TemporalAccessor) will always throw a DateTimeException or return the parameter directly.",
                "disable": false
            },
            {
                "real_name": "FunctionalInterfaceMethodChanged",
                "display_name": "FunctionalInterfaceMethodChanged",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Casting a lambda to this @FunctionalInterface can cause a behavior change from casting to a functional superinterface, which is surprising to users. Prefer decorator methods to this surprising behavior.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Casting a lambda to this @FunctionalInterface can cause a behavior change from casting to a functional superinterface, which is surprising to users. Prefer decorator methods to this surprising behavior.",
                "disable": false
            },
            {
                "real_name": "FuturesGetCheckedIllegalExceptionType",
                "display_name": "FuturesGetCheckedIllegalExceptionType",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Futures.getChecked requires a checked exception type with a standard constructor.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Futures.getChecked requires a checked exception type with a standard constructor.",
                "disable": false
            },
            {
                "real_name": "FuzzyEqualsShouldNotBeUsedInEqualsMethod",
                "display_name": "FuzzyEqualsShouldNotBeUsedInEqualsMethod",
                "severity": "error",
                "category": "correctness",
                "rule_title": "DoubleMath.fuzzyEquals should never be used in an Object.equals() method",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "DoubleMath.fuzzyEquals should never be used in an Object.equals() method",
                "disable": false
            },
            {
                "real_name": "GetClassOnAnnotation",
                "display_name": "GetClassOnAnnotation",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Calling getClass() on an annotation may return a proxy class",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Calling getClass() on an annotation may return a proxy class",
                "disable": false
            },
            {
                "real_name": "GetClassOnClass",
                "display_name": "GetClassOnClass",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Calling getClass() on an object of type Class returns the Class object for java.lang.Class; you probably meant to operate on the object directly",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Calling getClass() on an object of type Class returns the Class object for java.lang.Class; you probably meant to operate on the object directly",
                "disable": false
            },
            {
                "real_name": "GuardedBy",
                "display_name": "GuardedBy",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Checks for unguarded accesses to fields and methods with @GuardedBy annotations",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Checks for unguarded accesses to fields and methods with @GuardedBy annotations",
                "disable": false
            },
            {
                "real_name": "GuiceAssistedInjectScoping",
                "display_name": "GuiceAssistedInjectScoping",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Scope annotation on implementation class of AssistedInject factory is not allowed",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Scope annotation on implementation class of AssistedInject factory is not allowed",
                "disable": false
            },
            {
                "real_name": "GuiceAssistedParameters",
                "display_name": "GuiceAssistedParameters",
                "severity": "error",
                "category": "correctness",
                "rule_title": "A constructor cannot have two @Assisted parameters of the same type unless they are disambiguated with named @Assisted annotations.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "A constructor cannot have two @Assisted parameters of the same type unless they are disambiguated with named @Assisted annotations.",
                "disable": false
            },
            {
                "real_name": "GuiceInjectOnFinalField",
                "display_name": "GuiceInjectOnFinalField",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Although Guice allows injecting final fields, doing so is disallowed because the injected value may not be visible to other threads.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Although Guice allows injecting final fields, doing so is disallowed because the injected value may not be visible to other threads.",
                "disable": false
            },
            {
                "real_name": "HashtableContains",
                "display_name": "HashtableContains",
                "severity": "error",
                "category": "correctness",
                "rule_title": "contains() is a legacy method that is equivalent to containsValue()",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "contains() is a legacy method that is equivalent to containsValue()",
                "disable": false
            },
            {
                "real_name": "IdentityBinaryExpression",
                "display_name": "IdentityBinaryExpression",
                "severity": "error",
                "category": "correctness",
                "rule_title": "A binary expression where both operands are the same is usually incorrect.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "A binary expression where both operands are the same is usually incorrect.",
                "disable": false
            },
            {
                "real_name": "IdentityHashMapBoxing",
                "display_name": "IdentityHashMapBoxing",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Using IdentityHashMap with a boxed type as the key is risky since boxing may produce distinct instances",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Using IdentityHashMap with a boxed type as the key is risky since boxing may produce distinct instances",
                "disable": false
            },
            {
                "real_name": "Immutable",
                "display_name": "Immutable",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Type declaration annotated with @Immutable is not immutable",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Type declaration annotated with @Immutable is not immutable",
                "disable": false
            },
            {
                "real_name": "ImpossibleNullComparison",
                "display_name": "ImpossibleNullComparison",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This value cannot be null, and comparing it to null may be misleading.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This value cannot be null, and comparing it to null may be misleading.",
                "disable": false
            },
            {
                "real_name": "Incomparable",
                "display_name": "Incomparable",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Types contained in sorted collections must implement Comparable.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Types contained in sorted collections must implement Comparable.",
                "disable": false
            },
            {
                "real_name": "IncompatibleArgumentType",
                "display_name": "IncompatibleArgumentType",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Passing argument to a generic method with an incompatible type.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Passing argument to a generic method with an incompatible type.",
                "disable": false
            },
            {
                "real_name": "IncompatibleModifiers",
                "display_name": "IncompatibleModifiers",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This annotation has incompatible modifiers as specified by its @IncompatibleModifiers annotation",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This annotation has incompatible modifiers as specified by its @IncompatibleModifiers annotation",
                "disable": false
            },
            {
                "real_name": "IndexOfChar",
                "display_name": "IndexOfChar",
                "severity": "error",
                "category": "correctness",
                "rule_title": "The first argument to indexOf is a Unicode code point, and the second is the index to start the search from",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The first argument to indexOf is a Unicode code point, and the second is the index to start the search from",
                "disable": false
            },
            {
                "real_name": "InexactVarargsConditional",
                "display_name": "InexactVarargsConditional",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Conditional expression in varargs call contains array and non-array arguments",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Conditional expression in varargs call contains array and non-array arguments",
                "disable": false
            },
            {
                "real_name": "InfiniteRecursion",
                "display_name": "InfiniteRecursion",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This method always recurses, and will cause a StackOverflowError",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This method always recurses, and will cause a StackOverflowError",
                "disable": false
            },
            {
                "real_name": "InjectMoreThanOneScopeAnnotationOnClass",
                "display_name": "InjectMoreThanOneScopeAnnotationOnClass",
                "severity": "error",
                "category": "correctness",
                "rule_title": "A class can be annotated with at most one scope annotation.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "A class can be annotated with at most one scope annotation.",
                "disable": false
            },
            {
                "real_name": "InjectOnMemberAndConstructor",
                "display_name": "InjectOnMemberAndConstructor",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Members shouldn't be annotated with @Inject if constructor is already annotated @Inject",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Members shouldn't be annotated with @Inject if constructor is already annotated @Inject",
                "disable": false
            },
            {
                "real_name": "InlineMeValidator",
                "display_name": "InlineMeValidator",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Ensures that the @InlineMe annotation is used correctly.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Ensures that the @InlineMe annotation is used correctly.",
                "disable": false
            },
            {
                "real_name": "InstantTemporalUnit",
                "display_name": "InstantTemporalUnit",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Instant APIs only work for NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS, HALF_DAYS and DAYS.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Instant APIs only work for NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS, HALF_DAYS and DAYS.",
                "disable": false
            },
            {
                "real_name": "InvalidJavaTimeConstant",
                "display_name": "InvalidJavaTimeConstant",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This checker errors on calls to java.time methods using values that are guaranteed to throw a DateTimeException.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This checker errors on calls to java.time methods using values that are guaranteed to throw a DateTimeException.",
                "disable": false
            },
            {
                "real_name": "InvalidPatternSyntax",
                "display_name": "InvalidPatternSyntax",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Invalid syntax used for a regular expression",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Invalid syntax used for a regular expression",
                "disable": false
            },
            {
                "real_name": "InvalidTimeZoneID",
                "display_name": "InvalidTimeZoneID",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Invalid time zone identifier. TimeZone.getTimeZone(String) will silently return GMT instead of the time zone you intended.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Invalid time zone identifier. TimeZone.getTimeZone(String) will silently return GMT instead of the time zone you intended.",
                "disable": false
            },
            {
                "real_name": "InvalidZoneId",
                "display_name": "InvalidZoneId",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Invalid zone identifier. ZoneId.of(String) will throw exception at runtime.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Invalid zone identifier. ZoneId.of(String) will throw exception at runtime.",
                "disable": false
            },
            {
                "real_name": "IsInstanceIncompatibleType",
                "display_name": "IsInstanceIncompatibleType",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This use of isInstance will always evaluate to false.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This use of isInstance will always evaluate to false.",
                "disable": false
            },
            {
                "real_name": "IsInstanceOfClass",
                "display_name": "IsInstanceOfClass",
                "severity": "error",
                "category": "correctness",
                "rule_title": "The argument to Class#isInstance(Object) should not be a Class",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The argument to Class#isInstance(Object) should not be a Class",
                "disable": false
            },
            {
                "real_name": "IsLoggableTagLength",
                "display_name": "IsLoggableTagLength",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Log tag too long, cannot exceed 23 characters.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Log tag too long, cannot exceed 23 characters.",
                "disable": false
            },
            {
                "real_name": "JUnit3TestNotRun",
                "display_name": "JUnit3TestNotRun",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Test method will not be run; please correct method signature (Should be public, non-static, and method name should begin with \"test\").",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Test method will not be run; please correct method signature (Should be public, non-static, and method name should begin with \"test\").",
                "disable": false
            },
            {
                "real_name": "JUnit4ClassAnnotationNonStatic",
                "display_name": "JUnit4ClassAnnotationNonStatic",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This method should be static",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This method should be static",
                "disable": false
            },
            {
                "real_name": "JUnit4SetUpNotRun",
                "display_name": "JUnit4SetUpNotRun",
                "severity": "error",
                "category": "correctness",
                "rule_title": "setUp() method will not be run; please add JUnit's @Before annotation",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "setUp() method will not be run; please add JUnit's @Before annotation",
                "disable": false
            },
            {
                "real_name": "JUnit4TearDownNotRun",
                "display_name": "JUnit4TearDownNotRun",
                "severity": "error",
                "category": "correctness",
                "rule_title": "tearDown() method will not be run; please add JUnit's @After annotation",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "tearDown() method will not be run; please add JUnit's @After annotation",
                "disable": false
            },
            {
                "real_name": "JUnit4TestNotRun",
                "display_name": "JUnit4TestNotRun",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This looks like a test method but is not run; please add @Test and @Ignore, or, if this is a helper method, reduce its visibility.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This looks like a test method but is not run; please add @Test and @Ignore, or, if this is a helper method, reduce its visibility.",
                "disable": false
            },
            {
                "real_name": "JUnit4TestsNotRunWithinEnclosed",
                "display_name": "JUnit4TestsNotRunWithinEnclosed",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This test is annotated @Test, but given it's within a class using the Enclosed runner, will not run.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This test is annotated @Test, but given it's within a class using the Enclosed runner, will not run.",
                "disable": false
            },
            {
                "real_name": "JUnitAssertSameCheck",
                "display_name": "JUnitAssertSameCheck",
                "severity": "error",
                "category": "correctness",
                "rule_title": "An object is tested for reference equality to itself using JUnit library.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "An object is tested for reference equality to itself using JUnit library.",
                "disable": false
            },
            {
                "real_name": "JUnitParameterMethodNotFound",
                "display_name": "JUnitParameterMethodNotFound",
                "severity": "error",
                "category": "correctness",
                "rule_title": "The method for providing parameters was not found.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The method for providing parameters was not found.",
                "disable": false
            },
            {
                "real_name": "JavaxInjectOnAbstractMethod",
                "display_name": "JavaxInjectOnAbstractMethod",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Abstract and default methods are not injectable with javax.inject.Inject",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Abstract and default methods are not injectable with javax.inject.Inject",
                "disable": false
            },
            {
                "real_name": "JodaToSelf",
                "display_name": "JodaToSelf",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Use of Joda-Time's DateTime.toDateTime(), Duration.toDuration(), Instant.toInstant(), Interval.toInterval(), and Period.toPeriod() are not allowed.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Use of Joda-Time's DateTime.toDateTime(), Duration.toDuration(), Instant.toInstant(), Interval.toInterval(), and Period.toPeriod() are not allowed.",
                "disable": false
            },
            {
                "real_name": "LenientFormatStringValidation",
                "display_name": "LenientFormatStringValidation",
                "severity": "error",
                "category": "correctness",
                "rule_title": "The number of arguments provided to lenient format methods should match the positional specifiers.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The number of arguments provided to lenient format methods should match the positional specifiers.",
                "disable": false
            },
            {
                "real_name": "LiteByteStringUtf8",
                "display_name": "LiteByteStringUtf8",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This pattern will silently corrupt certain byte sequences from the serialized protocol message. Use ByteString or byte[] directly",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This pattern will silently corrupt certain byte sequences from the serialized protocol message. Use ByteString or byte[] directly",
                "disable": false
            },
            {
                "real_name": "LocalDateTemporalAmount",
                "display_name": "LocalDateTemporalAmount",
                "severity": "error",
                "category": "correctness",
                "rule_title": "LocalDate.plus() and minus() does not work with Durations. LocalDate represents civil time (years/months/days), so java.time.Period is the appropriate thing to add or subtract instead.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "LocalDate.plus() and minus() does not work with Durations. LocalDate represents civil time (years/months/days), so java.time.Period is the appropriate thing to add or subtract instead.",
                "disable": false
            },
            {
                "real_name": "LockOnBoxedPrimitive",
                "display_name": "LockOnBoxedPrimitive",
                "severity": "error",
                "category": "correctness",
                "rule_title": "It is dangerous to use a boxed primitive as a lock as it can unintentionally lead to sharing a lock with another piece of code.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "It is dangerous to use a boxed primitive as a lock as it can unintentionally lead to sharing a lock with another piece of code.",
                "disable": false
            },
            {
                "real_name": "LoopConditionChecker",
                "display_name": "LoopConditionChecker",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Loop condition is never modified in loop body.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Loop condition is never modified in loop body.",
                "disable": false
            },
            {
                "real_name": "LossyPrimitiveCompare",
                "display_name": "LossyPrimitiveCompare",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Using an unnecessarily-wide comparison method can lead to lossy comparison",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Using an unnecessarily-wide comparison method can lead to lossy comparison",
                "disable": false
            },
            {
                "real_name": "MathRoundIntLong",
                "display_name": "MathRoundIntLong",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Math.round(Integer) results in truncation",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Math.round(Integer) results in truncation",
                "disable": false
            },
            {
                "real_name": "MislabeledAndroidString",
                "display_name": "MislabeledAndroidString",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Certain resources in `android.R.string` have names that do not match their content",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Certain resources in `android.R.string` have names that do not match their content",
                "disable": false
            },
            {
                "real_name": "MisplacedScopeAnnotations",
                "display_name": "MisplacedScopeAnnotations",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Scope annotations used as qualifier annotations don't have any effect. Move the scope annotation to the binding location or delete it.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Scope annotations used as qualifier annotations don't have any effect. Move the scope annotation to the binding location or delete it.",
                "disable": false
            },
            {
                "real_name": "MissingSuperCall",
                "display_name": "MissingSuperCall",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Overriding method is missing a call to overridden super method",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Overriding method is missing a call to overridden super method",
                "disable": false
            },
            {
                "real_name": "MissingTestCall",
                "display_name": "MissingTestCall",
                "severity": "error",
                "category": "correctness",
                "rule_title": "A terminating method call is required for a test helper to have any effect.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "A terminating method call is required for a test helper to have any effect.",
                "disable": false
            },
            {
                "real_name": "MisusedDayOfYear",
                "display_name": "MisusedDayOfYear",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Use of 'DD' (day of year) in a date pattern with 'MM' (month of year) is not likely to be intentional, as it would lead to dates like 'March 73rd'.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Use of 'DD' (day of year) in a date pattern with 'MM' (month of year) is not likely to be intentional, as it would lead to dates like 'March 73rd'.",
                "disable": false
            },
            {
                "real_name": "MisusedWeekYear",
                "display_name": "MisusedWeekYear",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Use of \"YYYY\" (week year) in a date pattern without \"ww\" (week in year). You probably meant to use \"yyyy\" (year) instead.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Use of \"YYYY\" (week year) in a date pattern without \"ww\" (week in year). You probably meant to use \"yyyy\" (year) instead.",
                "disable": false
            },
            {
                "real_name": "MixedDescriptors",
                "display_name": "MixedDescriptors",
                "severity": "error",
                "category": "correctness",
                "rule_title": "The field number passed into #findFieldByNumber belongs to a different proto to the Descriptor.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The field number passed into #findFieldByNumber belongs to a different proto to the Descriptor.",
                "disable": false
            },
            {
                "real_name": "MockitoUsage",
                "display_name": "MockitoUsage",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Missing method call for verify(mock) here",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Missing method call for verify(mock) here",
                "disable": false
            },
            {
                "real_name": "ModifyingCollectionWithItself",
                "display_name": "ModifyingCollectionWithItself",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Using a collection function with itself as the argument.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Using a collection function with itself as the argument.",
                "disable": false
            },
            {
                "real_name": "MoreThanOneInjectableConstructor",
                "display_name": "MoreThanOneInjectableConstructor",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This class has more than one @Inject-annotated constructor. Please remove the @Inject annotation from all but one of them.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This class has more than one @Inject-annotated constructor. Please remove the @Inject annotation from all but one of them.",
                "disable": false
            },
            {
                "real_name": "MustBeClosedChecker",
                "display_name": "MustBeClosedChecker",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This method returns a resource which must be managed carefully, not just left for garbage collection. If it is a constant that will persist for the lifetime of your program, move it to a private static final field. Otherwise, you should use it in a try-with-resources.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This method returns a resource which must be managed carefully, not just left for garbage collection. If it is a constant that will persist for the lifetime of your program, move it to a private static final field. Otherwise, you should use it in a try-with-resources.",
                "disable": false
            },
            {
                "real_name": "NCopiesOfChar",
                "display_name": "NCopiesOfChar",
                "severity": "error",
                "category": "correctness",
                "rule_title": "The first argument to nCopies is the number of copies, and the second is the item to copy",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The first argument to nCopies is the number of copies, and the second is the item to copy",
                "disable": false
            },
            {
                "real_name": "NoCanIgnoreReturnValueOnClasses",
                "display_name": "NoCanIgnoreReturnValueOnClasses",
                "severity": "error",
                "category": "correctness",
                "rule_title": "@CanIgnoreReturnValue should not be applied to classes as it almost always overmatches (as it applies to constructors and all methods), and the CIRVness isn't conferred to its subclasses.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "@CanIgnoreReturnValue should not be applied to classes as it almost always overmatches (as it applies to constructors and all methods), and the CIRVness isn't conferred to its subclasses.",
                "disable": false
            },
            {
                "real_name": "NonCanonicalStaticImport",
                "display_name": "NonCanonicalStaticImport",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Static import of type uses non-canonical name",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Static import of type uses non-canonical name",
                "disable": false
            },
            {
                "real_name": "NonFinalCompileTimeConstant",
                "display_name": "NonFinalCompileTimeConstant",
                "severity": "error",
                "category": "correctness",
                "rule_title": "@CompileTimeConstant parameters should be final or effectively final",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "@CompileTimeConstant parameters should be final or effectively final",
                "disable": false
            },
            {
                "real_name": "NonRuntimeAnnotation",
                "display_name": "NonRuntimeAnnotation",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Calling getAnnotation on an annotation that is not retained at runtime",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Calling getAnnotation on an annotation that is not retained at runtime",
                "disable": false
            },
            {
                "real_name": "NullArgumentForNonNullParameter",
                "display_name": "NullArgumentForNonNullParameter",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Null is not permitted for this parameter.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Null is not permitted for this parameter.",
                "disable": false
            },
            {
                "real_name": "NullTernary",
                "display_name": "NullTernary",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This conditional expression may evaluate to null, which will result in an NPE when the result is unboxed.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This conditional expression may evaluate to null, which will result in an NPE when the result is unboxed.",
                "disable": false
            },
            {
                "real_name": "NullableOnContainingClass",
                "display_name": "NullableOnContainingClass",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Type-use nullability annotations should annotate the inner class, not the outer class (e.g., write `A.@Nullable B` instead of `@Nullable A.B`).",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Type-use nullability annotations should annotate the inner class, not the outer class (e.g., write `A.@Nullable B` instead of `@Nullable A.B`).",
                "disable": false
            },
            {
                "real_name": "OptionalEquality",
                "display_name": "OptionalEquality",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Comparison using reference equality instead of value equality",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Comparison using reference equality instead of value equality",
                "disable": false
            },
            {
                "real_name": "OptionalMapUnusedValue",
                "display_name": "OptionalMapUnusedValue",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Optional.ifPresent is preferred over Optional.map when the return value is unused",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Optional.ifPresent is preferred over Optional.map when the return value is unused",
                "disable": false
            },
            {
                "real_name": "OptionalOfRedundantMethod",
                "display_name": "OptionalOfRedundantMethod",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Optional.of() always returns a non-empty optional. Using ifPresent/isPresent/orElse/orElseGet/orElseThrow/isPresent/or/orNull method on it is unnecessary and most probably a bug.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Optional.of() always returns a non-empty optional. Using ifPresent/isPresent/orElse/orElseGet/orElseThrow/isPresent/or/orNull method on it is unnecessary and most probably a bug.",
                "disable": false
            },
            {
                "real_name": "OverlappingQualifierAndScopeAnnotation",
                "display_name": "OverlappingQualifierAndScopeAnnotation",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Annotations cannot be both Scope annotations and Qualifier annotations: this causes confusion when trying to use them.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Annotations cannot be both Scope annotations and Qualifier annotations: this causes confusion when trying to use them.",
                "disable": false
            },
            {
                "real_name": "OverridesJavaxInjectableMethod",
                "display_name": "OverridesJavaxInjectableMethod",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This method is not annotated with @Inject, but it overrides a method that is annotated with @javax.inject.Inject. The method will not be Injected.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This method is not annotated with @Inject, but it overrides a method that is annotated with @javax.inject.Inject. The method will not be Injected.",
                "disable": false
            },
            {
                "real_name": "PackageInfo",
                "display_name": "PackageInfo",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Declaring types inside package-info.java files is very bad form",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Declaring types inside package-info.java files is very bad form",
                "disable": false
            },
            {
                "real_name": "ParametersButNotParameterized",
                "display_name": "ParametersButNotParameterized",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This test has @Parameters but is using the default JUnit4 runner. The parameters will have no effect.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This test has @Parameters but is using the default JUnit4 runner. The parameters will have no effect.",
                "disable": false
            },
            {
                "real_name": "ParcelableCreator",
                "display_name": "ParcelableCreator",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Detects classes which implement Parcelable but don't have CREATOR",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Detects classes which implement Parcelable but don't have CREATOR",
                "disable": false
            },
            {
                "real_name": "PeriodFrom",
                "display_name": "PeriodFrom",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Period.from(Period) returns itself; from(Duration) throws a runtime exception.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Period.from(Period) returns itself; from(Duration) throws a runtime exception.",
                "disable": false
            },
            {
                "real_name": "PeriodGetTemporalUnit",
                "display_name": "PeriodGetTemporalUnit",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Period.get() only works with YEARS, MONTHS, or DAYS.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Period.get() only works with YEARS, MONTHS, or DAYS.",
                "disable": false
            },
            {
                "real_name": "PeriodTimeMath",
                "display_name": "PeriodTimeMath",
                "severity": "error",
                "category": "correctness",
                "rule_title": "When adding or subtracting from a Period, Duration is incompatible.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "When adding or subtracting from a Period, Duration is incompatible.",
                "disable": false
            },
            {
                "real_name": "PreconditionsInvalidPlaceholder",
                "display_name": "PreconditionsInvalidPlaceholder",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Preconditions only accepts the %s placeholder in error message strings",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Preconditions only accepts the %s placeholder in error message strings",
                "disable": false
            },
            {
                "real_name": "PrivateSecurityContractProtoAccess",
                "display_name": "PrivateSecurityContractProtoAccess",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Access to a private protocol buffer field is forbidden. This protocol buffer carries a security contract, and can only be created using an approved library. Direct access to the fields is forbidden.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Access to a private protocol buffer field is forbidden. This protocol buffer carries a security contract, and can only be created using an approved library. Direct access to the fields is forbidden.",
                "disable": false
            },
            {
                "real_name": "ProtoBuilderReturnValueIgnored",
                "display_name": "ProtoBuilderReturnValueIgnored",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Unnecessary call to proto's #build() method. If you don't consume the return value of #build(), the result is discarded and the only effect is to verify that all required fields are set, which can be expressed more directly with #isInitialized().",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Unnecessary call to proto's #build() method. If you don't consume the return value of #build(), the result is discarded and the only effect is to verify that all required fields are set, which can be expressed more directly with #isInitialized().",
                "disable": false
            },
            {
                "real_name": "ProtoStringFieldReferenceEquality",
                "display_name": "ProtoStringFieldReferenceEquality",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Comparing protobuf fields of type String using reference equality",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Comparing protobuf fields of type String using reference equality",
                "disable": false
            },
            {
                "real_name": "ProtoTruthMixedDescriptors",
                "display_name": "ProtoTruthMixedDescriptors",
                "severity": "error",
                "category": "correctness",
                "rule_title": "The arguments passed to `ignoringFields` are inconsistent with the proto which is the subject of the assertion.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The arguments passed to `ignoringFields` are inconsistent with the proto which is the subject of the assertion.",
                "disable": false
            },
            {
                "real_name": "ProtocolBufferOrdinal",
                "display_name": "ProtocolBufferOrdinal",
                "severity": "error",
                "category": "correctness",
                "rule_title": "To get the tag number of a protocol buffer enum, use getNumber() instead.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "To get the tag number of a protocol buffer enum, use getNumber() instead.",
                "disable": false
            },
            {
                "real_name": "ProvidesMethodOutsideOfModule",
                "display_name": "ProvidesMethodOutsideOfModule",
                "severity": "error",
                "category": "correctness",
                "rule_title": "@Provides methods need to be declared in a Module to have any effect.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "@Provides methods need to be declared in a Module to have any effect.",
                "disable": false
            },
            {
                "real_name": "RandomCast",
                "display_name": "RandomCast",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Casting a random number in the range [0.0, 1.0) to an integer or long always results in 0.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Casting a random number in the range [0.0, 1.0) to an integer or long always results in 0.",
                "disable": false
            },
            {
                "real_name": "RandomModInteger",
                "display_name": "RandomModInteger",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Use Random.nextInt(int). Random.nextInt() % n can have negative results",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Use Random.nextInt(int). Random.nextInt() % n can have negative results",
                "disable": false
            },
            {
                "real_name": "RectIntersectReturnValueIgnored",
                "display_name": "RectIntersectReturnValueIgnored",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Return value of android.graphics.Rect.intersect() must be checked",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Return value of android.graphics.Rect.intersect() must be checked",
                "disable": false
            },
            {
                "real_name": "RequiredModifiers",
                "display_name": "RequiredModifiers",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This annotation is missing required modifiers as specified by its @RequiredModifiers annotation",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This annotation is missing required modifiers as specified by its @RequiredModifiers annotation",
                "disable": false
            },
            {
                "real_name": "RestrictedApi",
                "display_name": "RestrictedApi",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Check for non-allowlisted callers to RestrictedApiChecker.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Check for non-allowlisted callers to RestrictedApiChecker.",
                "disable": false
            },
            {
                "real_name": "ReturnValueIgnored",
                "display_name": "ReturnValueIgnored",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Return value of this method must be used",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Return value of this method must be used",
                "disable": false
            },
            {
                "real_name": "SelfAssignment",
                "display_name": "SelfAssignment",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Variable assigned to itself",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Variable assigned to itself",
                "disable": false
            },
            {
                "real_name": "SelfComparison",
                "display_name": "SelfComparison",
                "severity": "error",
                "category": "correctness",
                "rule_title": "An object is compared to itself",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "An object is compared to itself",
                "disable": false
            },
            {
                "real_name": "SelfEquals",
                "display_name": "SelfEquals",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Testing an object for equality with itself will always be true.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Testing an object for equality with itself will always be true.",
                "disable": false
            },
            {
                "real_name": "ShouldHaveEvenArgs",
                "display_name": "ShouldHaveEvenArgs",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This method must be called with an even number of arguments.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This method must be called with an even number of arguments.",
                "disable": false
            },
            {
                "real_name": "SizeGreaterThanOrEqualsZero",
                "display_name": "SizeGreaterThanOrEqualsZero",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Comparison of a size >= 0 is always true, did you intend to check for non-emptiness?",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Comparison of a size >= 0 is always true, did you intend to check for non-emptiness?",
                "disable": false
            },
            {
                "real_name": "StreamToString",
                "display_name": "StreamToString",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Calling toString on a Stream does not provide useful information",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Calling toString on a Stream does not provide useful information",
                "disable": false
            },
            {
                "real_name": "StringBuilderInitWithChar",
                "display_name": "StringBuilderInitWithChar",
                "severity": "error",
                "category": "correctness",
                "rule_title": "StringBuilder does not have a char constructor; this invokes the int constructor.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "StringBuilder does not have a char constructor; this invokes the int constructor.",
                "disable": false
            },
            {
                "real_name": "SubstringOfZero",
                "display_name": "SubstringOfZero",
                "severity": "error",
                "category": "correctness",
                "rule_title": "String.substring(0) returns the original String",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "String.substring(0) returns the original String",
                "disable": false
            },
            {
                "real_name": "SuppressWarningsDeprecated",
                "display_name": "SuppressWarningsDeprecated",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Suppressing \"deprecated\" is probably a typo for \"deprecation\"",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Suppressing \"deprecated\" is probably a typo for \"deprecation\"",
                "disable": false
            },
            {
                "real_name": "TemporalAccessorGetChronoField",
                "display_name": "TemporalAccessorGetChronoField",
                "severity": "error",
                "category": "correctness",
                "rule_title": "TemporalAccessor.get() only works for certain values of ChronoField.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "TemporalAccessor.get() only works for certain values of ChronoField.",
                "disable": false
            },
            {
                "real_name": "TestParametersNotInitialized",
                "display_name": "TestParametersNotInitialized",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This test has @TestParameter fields but is using the default JUnit4 runner. The parameters will not be initialised beyond their default value.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This test has @TestParameter fields but is using the default JUnit4 runner. The parameters will not be initialised beyond their default value.",
                "disable": false
            },
            {
                "real_name": "TheoryButNoTheories",
                "display_name": "TheoryButNoTheories",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This test has members annotated with @Theory, @DataPoint, or @DataPoints but is using the default JUnit4 runner.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This test has members annotated with @Theory, @DataPoint, or @DataPoints but is using the default JUnit4 runner.",
                "disable": false
            },
            {
                "real_name": "ThrowIfUncheckedKnownChecked",
                "display_name": "ThrowIfUncheckedKnownChecked",
                "severity": "error",
                "category": "correctness",
                "rule_title": "throwIfUnchecked(knownCheckedException) is a no-op.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "throwIfUnchecked(knownCheckedException) is a no-op.",
                "disable": false
            },
            {
                "real_name": "ThrowNull",
                "display_name": "ThrowNull",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Throwing 'null' always results in a NullPointerException being thrown.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Throwing 'null' always results in a NullPointerException being thrown.",
                "disable": false
            },
            {
                "real_name": "TreeToString",
                "display_name": "TreeToString",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Tree#toString shouldn't be used for Trees deriving from the code being compiled, as it discards whitespace and comments.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Tree#toString shouldn't be used for Trees deriving from the code being compiled, as it discards whitespace and comments.",
                "disable": false
            },
            {
                "real_name": "TruthSelfEquals",
                "display_name": "TruthSelfEquals",
                "severity": "error",
                "category": "correctness",
                "rule_title": "isEqualTo should not be used to test an object for equality with itself; the assertion will never fail.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "isEqualTo should not be used to test an object for equality with itself; the assertion will never fail.",
                "disable": false
            },
            {
                "real_name": "TryFailThrowable",
                "display_name": "TryFailThrowable",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Catching Throwable/Error masks failures from fail() or assert*() in the try block",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Catching Throwable/Error masks failures from fail() or assert*() in the try block",
                "disable": false
            },
            {
                "real_name": "TypeParameterQualifier",
                "display_name": "TypeParameterQualifier",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Type parameter used as type qualifier",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Type parameter used as type qualifier",
                "disable": false
            },
            {
                "real_name": "UnicodeDirectionalityCharacters",
                "display_name": "UnicodeDirectionalityCharacters",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Unicode directionality modifiers can be used to conceal code in many editors.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Unicode directionality modifiers can be used to conceal code in many editors.",
                "disable": false
            },
            {
                "real_name": "UnicodeInCode",
                "display_name": "UnicodeInCode",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Avoid using non-ASCII Unicode characters outside of comments and literals, as they can be confusing.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Avoid using non-ASCII Unicode characters outside of comments and literals, as they can be confusing.",
                "disable": false
            },
            {
                "real_name": "UnnecessaryCheckNotNull",
                "display_name": "UnnecessaryCheckNotNull",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This null check is unnecessary; the expression can never be null",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This null check is unnecessary; the expression can never be null",
                "disable": false
            },
            {
                "real_name": "UnnecessaryTypeArgument",
                "display_name": "UnnecessaryTypeArgument",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Non-generic methods should not be invoked with type arguments",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Non-generic methods should not be invoked with type arguments",
                "disable": false
            },
            {
                "real_name": "UnsafeWildcard",
                "display_name": "UnsafeWildcard",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Certain wildcard types can confuse the compiler.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Certain wildcard types can confuse the compiler.",
                "disable": false
            },
            {
                "real_name": "UnusedAnonymousClass",
                "display_name": "UnusedAnonymousClass",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Instance created but never used",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Instance created but never used",
                "disable": false
            },
            {
                "real_name": "UnusedCollectionModifiedInPlace",
                "display_name": "UnusedCollectionModifiedInPlace",
                "severity": "error",
                "category": "correctness",
                "rule_title": "Collection is modified in place, but the result is not used",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "Collection is modified in place, but the result is not used",
                "disable": false
            },
            {
                "real_name": "VarTypeName",
                "display_name": "VarTypeName",
                "severity": "error",
                "category": "correctness",
                "rule_title": "`var` should not be used as a type name.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "`var` should not be used as a type name.",
                "disable": false
            },
            {
                "real_name": "WrongOneof",
                "display_name": "WrongOneof",
                "severity": "error",
                "category": "correctness",
                "rule_title": "This field is guaranteed not to be set given it's within a switch over a one_of.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "This field is guaranteed not to be set given it's within a switch over a one_of.",
                "disable": false
            },
            {
                "real_name": "XorPower",
                "display_name": "XorPower",
                "severity": "error",
                "category": "correctness",
                "rule_title": "The `^` operator is binary XOR, not a power operator.",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "java"
                ],
                "solution": "see https://errorprone.info/bugpatterns",
                "owner": null,
                "labels": [],
                "description": "The `^` operator is binary XOR, not a power operator.",
                "disable": false
            }
        ],
        "open_user": true,
        "open_saas": false,
        "virtual_name": "125",
        "show_display_name": true
    }
]