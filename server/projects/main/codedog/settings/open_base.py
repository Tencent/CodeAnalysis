# -*- coding: utf-8 -*-
# Copyright (c) 2021-2022 THL A29 Limited
#
# This source code file is made available under MIT License
# See LICENSE for details
# ==============================================================================

"""
Django settings for codedog project.

Generated by 'django-admin startproject' using Django 1.8.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
from datetime import timedelta
from os.path import dirname, join, abspath


# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-
# Django工程配置
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-

BASE_DIR = dirname(dirname(dirname(abspath(__file__))))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'guardian',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'django_celery_results',
    'django_filters',
    'apps.authen',
    'apps.base',
    'apps.nodemgr',
    'apps.job',
    'apps.scan_conf',
    'apps.codeproj',
]


MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'codedog.open_urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'APP_DIRS': True,
        'OPTIONS': {
            'environment': 'codedog.jinja2.environment',
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'codedog.wsgi.application'

LANGUAGE_CODE = 'zh-CN'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# 静态资源文件配置
STATICFILES_DIRS = (
    join(BASE_DIR, 'static'),
)

STATIC_URL = '/static/'
STATIC_ROOT = join(BASE_DIR, 'staticroot')

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '-%(asctime)s-%(levelname)s-%(name)s: %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'default',
            'filename': join(BASE_DIR, 'log', 'codedog.log'),
            'maxBytes': 1 << 28,
            'backupCount': 5
        },
        'info_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'default',
            'filename': join(BASE_DIR, 'log', 'codedog_info.log'),
            'maxBytes': 1 << 28,
            'backupCount': 5
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'default',
            'filename': join(BASE_DIR, 'log', 'codedog_error.log'),
            'maxBytes': 1 << 28,
            'backupCount': 5
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        }
    },
    'loggers': {
        '': {
            'handlers': [
                'file',
                'info_file',
                'console',
                'error_file',
            ],
            'level': 'DEBUG',
            'propagate': True,
        },

    }
}

# Celery配置
# 注：
#   1. celery定时任务配置位置： codedog/celery.py
#   2. Main Server默认为 redis db1，Analysis Server默认为 redis db0
CELERY_BROKER_URL = "redis://127.0.0.1:6379/1"
CELERY_RESULT_BACKEND = "django-db"
# CELERY 定时调度器 redbeat redis地址
redbeat_redis_url = "redis://127.0.0.1:6379/1"


# 使用数据库作为缓存表
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'codedog_cache_table',
    }
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',
]
GUARDIAN_RAISE_403 = True  # 设置403错误时抛出异常而不是返回空白的403

# 平台鉴权配置
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "apps.authen.backends.ServerAPIAuthentication",
        "apps.authen.backends.TiyanLoginBackend",
        "apps.authen.backends.TCANodeTokenBackend",
    ),
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    'PAGE_SIZE': 10,
    'DEFAULT_RENDERER_CLASSES': (
        'util.renderers.DefaultJSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'EXCEPTION_HANDLER': 'util.handlers.tiyan_format_exception_handler',
}


# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-
# Django工程配置
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-


# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-
# CodeDog运行环境配置
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-

# CodeDog开关配置
LOGIN_USER_TYPE = "codedog_user"
CODEDOG_USER_CHECK = False
DEFAULT_USERNAME = "CodeDog"
DEFAULT_ORIGIN_ID = "CodeDog"
# HTTPS克隆开关
HTTPS_CLONE_FLAG = True

# 时间配置
CLOSING_JOB_TIMEOUT = timedelta(hours=12)          # 入库超时时间
CLEAN_JOB_TIMEOUT = timedelta(days=1)              # 任务超时时间
CLEAN_PRIVATE_JOB_TIMEOUT = timedelta(minutes=5)   # 私有任务超时时间
INIT_JOB_TIMEOUT = timedelta(minutes=20)           # 任务初始化超时时间
CLEAN_DIR_TIMEOUT = timedelta(days=10)             # jobdata目录下超时时间
NODE_ACTIVE_TIMEOUT = timedelta(minutes=5)         # 节点端没有心跳则标记为offline时间
PROJECT_DISACTIVE_TIMEOUT = timedelta(days=180)    # 项目失活时间
JOB_RUNTIME_LIMIT = 600                            # 任务超时时间，单位分钟

# 本站域名地址
LOCAL_DOMAIN = ""

# scmproxy服务地址
SCMPROXY = ""
SCMPROXY_TIMEOUT = os.environ.get("SCMPROXY_TIMEOUT", 20)

# Analyse Server Ticket
API_TICKET_SALT = ""
API_TICKET_TOKEN = ""

# 体验鉴权公钥，通过Login服务获取
LOGIN_SERVER_URL = ""
AUTHORIZATION_PUBKEY = ""

# 节点鉴权信息加密
PASSWORD_KEY = ""

# 节点Token加密，与节点鉴权信息保持一致
NODE_TICKET_SALT = ""

# 平台内置Token，可以使用 import binascii, os; binascii.hexlify(os.urandom(20)).decode() 生成
CODEDOG_TOKEN = ""


# TCA Web URL
CODEDOG_PAGE_PATH = {
    "project_overview": "repos/{repo_id}/projects/{project_id}",
    "project_scan": "repos/{repo_id}/projects/{project_id}/scan_history",
    "node_detail": "nodes/{node_id}"
}


# TCA 文档标记鉴权类型
# TCA Swagger接口文档配置
SWAGGER_SETTINGS = {
    "API_URL": "http://server.tca.com",
    "API_PREFIX": "/main",
    "SECURITY_DEFINITIONS": {
        "Token": {
            "type": 'apiKey',
            "name": 'Authorization',
            "in": 'header',
            "description": ""
        }
    }
}

# OauthToken相关配置
GIT_OA_OAUTH_URL = os.getenv("GIT_OA_OAUTH_URL", "")
GIT_TENCENT_OAUTH_URL = os.getenv("GIT_TENCENT", "http://git.code.tencent.com/oauth/authorize")
GITHUB_OAUTH_URL = os.getenv("GITHUB_OAUTH_URL", "https://github.com/login/oauth/authorize")
GITLAB_OAUTH_URL = os.getenv("GITLAB_OAUTH_URL", "https://gitlab.com/oauth/authorize")
GITEE_OAUTH_URL = os.getenv("GITEE_OAUTH_URL", "https://gitee.com/oauth/authorize")

# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-
# CodeDog运行环境配置
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-
