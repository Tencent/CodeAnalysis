import{_ as d,a as c,b as r,c as t,d as l,e as o,f as h,g as p,h as u,i as m,j as b,k as v,l as g}from"./jenkins_shell-131e349c.js";import{_,r as x,o as A,c as f,a,b as e,d as s,e as i}from"./app-00f3c486.js";const C={},k=i('<h1 id="jenkins插件使用说明" tabindex="-1"><a class="header-anchor" href="#jenkins插件使用说明" aria-hidden="true">#</a> Jenkins插件使用说明</h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>以下说明以 Jenkins 2.361.2 版本为例。</p></div><h2 id="使用前准备" tabindex="-1"><a class="header-anchor" href="#使用前准备" aria-hidden="true">#</a> 使用前准备</h2><h3 id="获取jenkins插件" tabindex="-1"><a class="header-anchor" href="#获取jenkins插件" aria-hidden="true">#</a> 获取Jenkins插件</h3><p>Jenkins插件有以下两种获取方式：</p><p><strong>方式一</strong>：在 TCA 源码的<code>plugin/jenkins_plugin</code>目录下，执行命令<code>mvn package -DskipTests</code>，打包完成后进入target目录会看到<code>tca_jenkins_plugin.hpi</code> 的安装包。</p>',6),T=a("strong",null,"方式二",-1),y=a("code",null,"jenkins_plugin.hpi",-1),I={href:"https://github.com/Tencent/CodeAnalysis/releases",target:"_blank",rel:"noopener noreferrer"},j=i('<h3 id="在jenkins安装插件" tabindex="-1"><a class="header-anchor" href="#在jenkins安装插件" aria-hidden="true">#</a> 在Jenkins安装插件</h3><p>在Jenkins中通过【Manage Plugin】-&gt; 【Advanced】-&gt;【Deploy plugin】的方式选择 Jenkins_plugin.hpi文件上传安装，并重启Jenkins。<br><img src="'+d+'" alt=""><img src="'+c+'" width="500"></p><p>最终在【Installed】里搜索出【TCA】代表插件安装成功。 <img src="'+r+`" alt=""></p><h3 id="完善启动客户端的环境" tabindex="-1"><a class="header-anchor" href="#完善启动客户端的环境" aria-hidden="true">#</a> 完善启动客户端的环境</h3><p>在CodeAnalysis目录下执行代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>bash ./scripts/base/install_bin.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将<code>client</code>目录下的<code>config.ini</code>文件中的<code>&lt;Server IP地址&gt;</code>替换为部署的开源版TCA的IP地址（可包含端口号）</p><h2 id="使用插件" tabindex="-1"><a class="header-anchor" href="#使用插件" aria-hidden="true">#</a> 使用插件</h2><h3 id="在-tca-创建团队和项目" tabindex="-1"><a class="header-anchor" href="#在-tca-创建团队和项目" aria-hidden="true">#</a> 在 TCA 创建团队和项目</h3><p>如已创建后待使用的团队和项目，可跳过此步。</p><p>进入已部署好的TCA页面，点击【创建团队】，成功后【创建项目】。</p><h3 id="配置jenkins环境变量" tabindex="-1"><a class="header-anchor" href="#配置jenkins环境变量" aria-hidden="true">#</a> 配置Jenkins环境变量</h3><p>进入Jenkins设置界面，在【Manage Jenkins】-&gt;【Configure System】-&gt;【Global properties】中添加环境变量：<br> Name：<code>PYTHONPATH</code> Value：xxxx（路径不包含python3）<br> Value：<code>GITPATH</code> Value：xxxx（路径不包含git）<br><img src="`+t+'" alt=""><img src="'+l+'" alt=""><img src="'+o+'" width="400"></p><h3 id="配置-tca-插件" tabindex="-1"><a class="header-anchor" href="#配置-tca-插件" aria-hidden="true">#</a> 配置 TCA 插件</h3><h4 id="方式一-可视化界面配置-tca-插件" tabindex="-1"><a class="header-anchor" href="#方式一-可视化界面配置-tca-插件" aria-hidden="true">#</a> 方式一：可视化界面配置 TCA 插件</h4><p>创建一个构建任务，配置代码库信息，进入Jenkins，通过【New Item】创建一个空白任务，在任务配置中【Source Code Management】配置待分析的代码库地址和凭证。<br><code>Repository URL</code>: 填入远端仓库地址<br><code>Credentials</code>: 添加仓库的用户名和密码作为凭证，如果是公开仓库，可以不设置仓库凭证</p><img src="'+h+'" width="300"><p><img src="'+p+'" alt=""></p><p>在构建任务的【Build】中选择【TCA】插件并配置以下参数：</p><p><code>CodeAnalysis目录绝对路径</code>: 拉取到本地的CodeAnalysis开源仓库目录的绝对路径(例如：/data/CodeAnalysis/)<br><code>团队ID</code>: 在 TCA 中创建的团队的标识ID，可在TCA【团队概览】中获取“团队唯一标识”<br><code>项目名称</code>: 在 TCA 中创建的项目的标识ID，可在TCA【项目概览】中获取“项目唯一标识”<br><code>Token</code>: 在 TCA 的【个人中心】-&gt;【个人令牌】中获取<br><code>分支名称</code>: 需要扫描的代码分支名称<br><code>语言类别</code>: 项目需要扫描的语言<br><code>分析方案模板ID</code>: 需要使用的分析方案模板ID，在分析方案模板的“基础属性”中获取，将根据此模板创建分析方案（选填）<br><code>分析方案名称</code>: 指定创建出来的分析方案的名称（选填）<br><code>全量扫描</code>: 不勾选默认启动增量扫描<br><code>质量门禁</code>: 设置质量门禁值，配置和使用参考 <a href="#%E8%AE%BE%E7%BD%AE%E8%B4%A8%E9%87%8F%E9%97%A8%E7%A6%81">设置质量门禁</a></p><p>配置完成后点击【Save】保存。</p><p><img src="'+u+'" alt=""></p><h4 id="方式二-pipeline语法配置-tca-插件" tabindex="-1"><a class="header-anchor" href="#方式二-pipeline语法配置-tca-插件" aria-hidden="true">#</a> 方式二：pipeline语法配置 TCA 插件</h4>',23),q={href:"https://github.com/Tencent/CodeAnalysis/issues/1150",target:"_blank",rel:"noopener noreferrer"},J=i(`<div class="language-pipeline line-numbers-mode" data-ext="pipeline"><pre class="language-pipeline"><code>pipeline{
  agent any

    stages{
      stage(&#39;Build&#39;){
        steps{
            TCA(codeAnalysisPath: &#39;/data/CodeAnalysis/&#39;, teamId: &#39;xxxx&#39;, projectName: &#39;demo&#39;, token: &#39;xxxxxxxxxxxx&#39;, branchName: &#39;master&#39;, languageType: &#39;Java&#39;, refSchemeID: &#39;1&#39;, scanPlan: &#39;model&#39;, threshold: &#39;90&#39;, total:true)
        }
      }
    }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>codeAnalysisPath</code>: 拉取到本地的CodeAnalysis开源仓库目录的绝对路径(例如：/data/CodeAnalysis/)<br><code>teamId</code>：团队ID<br><code>projectName</code>: 项目名称<br><code>token</code>: 在 TCA 的【个人中心】-&gt;【个人令牌】中获取<br><code>branchName</code>: 需要扫描的代码分支名称<br><code>languageType</code>: 项目需要扫描的语言<br><code>refSchemeID</code>: 需要使用的分析方案模板ID，在分析方案模板的“基础属性”中获取，将根据此模板创建分析方案（选填）<br><code>scanPlan</code>: 指定创建出来的分析方案的名称（选填）<br><code>threshold</code>: 设置质量门禁值<br><code>total</code>: 是否全量扫描，填<code>ture</code>为全量扫描，不填或填<code>false</code>为增量扫描</p><h3 id="启动构建并查看结果" tabindex="-1"><a class="header-anchor" href="#启动构建并查看结果" aria-hidden="true">#</a> 启动构建并查看结果</h3><p>点击【Build Now】启动构建。<br> 进入构建任务，在【Console Output】中查看执行过程。<br> 执行完成后，可在下方看到代码分析的结果链接，也可在【代码分析报告】中获取代码分析的json报告。<br><img src="`+m+'" alt=""><img src="'+b+'" width="300"><img src="'+v+'" alt=""></p><h2 id="设置质量门禁" tabindex="-1"><a class="header-anchor" href="#设置质量门禁" aria-hidden="true">#</a> 设置质量门禁</h2><p>在上述 TCA 插件配置部分填写<code>质量门禁</code>参数，需要填写一个整数，即当前分支的扫描问题量大于该质量门禁值时，判断为不通过；否则为通过。完成后会将TCA结果状态（<code>success</code>|<code>failure</code>）输出到工作空间下的<code>tca_threshold.txt</code>文件中，供后续步骤判断和终止流水线。</p><h3 id="可视化界面使用质量门禁" tabindex="-1"><a class="header-anchor" href="#可视化界面使用质量门禁" aria-hidden="true">#</a> 可视化界面使用质量门禁</h3><p>在TCA插件后增加shell命令步骤，输入以下脚本内容：</p><p><img src="'+g+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tca_status=\`cat tca_threshold.txt\`
if [ &quot;\${tca_status}&quot; == &quot;success&quot; ]; then
  echo &quot;&gt;&gt; tca scan pass!&quot;
else
  echo &quot;&gt;&gt; tca scan fail! exit code 255&quot;
  exit 255
fi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当质量门禁不通过时，会终止流水线（退出码：255）。</p><h3 id="pipeline脚本使用质量门禁" tabindex="-1"><a class="header-anchor" href="#pipeline脚本使用质量门禁" aria-hidden="true">#</a> pipeline脚本使用质量门禁</h3><p>以下是pipeline脚本使用质量门禁进行相应操作的示例，你可以在if和else部分写入你想要运行的脚本</p><div class="language-pipeline line-numbers-mode" data-ext="pipeline"><pre class="language-pipeline"><code>pipeline{
  agent any

    stages{
      stage(&#39;Build&#39;){
        steps{
            TCA(codeAnalysisPath: &#39;/data/CodeAnalysis/&#39;, teamId: &#39;xxxx&#39;, projectName: &#39;demo&#39;, token: &#39;xxxxxxxxxxxx&#39;, branchName: &#39;master&#39;, languageType: &#39;Java&#39;, refSchemeID: &#39;1&#39;, scanPlan: &#39;model&#39;, threshold: &#39;90&#39;, total:true)
            script{
                def tca_status = readFile(&#39;tca_threshold.txt&#39;)
                if (tca_status == &quot;success&quot;) {
                    echo &quot;&gt;&gt; tca scan pass!&quot;
                } else {
                    echo &quot;&gt;&gt; tca scan fail! exit code 255&quot;
                    error(&quot;TCA scan failed. Terminating pipeline.&quot;)
                }
            }
        }
      }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function P(N,D){const n=x("ExternalLinkIcon");return A(),f("div",null,[k,a("p",null,[T,e("：从TCA release 安装包中，获取"),y,e("："),a("a",I,[e("https://github.com/Tencent/CodeAnalysis/releases"),s(n)]),e("。")]),j,a("p",null,[e("在步骤中添加TCA插件参数配置语句，下面的配置语句可作为参考；注意：如果是release版本v1.11.0及之前的老版本（包含源代码构建生成和release获取）插件，语法参数略有差别，请参考"),a("a",q,[e("issue1150"),s(n)])]),J])}const S=_(C,[["render",P],["__file","Jenkins_Plugin.html.vue"]]);export{S as default};
