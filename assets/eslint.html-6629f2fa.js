import{_ as t,o as e,c as l,e as i}from"./app-00f3c486.js";const a={},d=i(`<h1 id="eslint-使用手册" tabindex="-1"><a class="header-anchor" href="#eslint-使用手册" aria-hidden="true">#</a> Eslint 使用手册</h1><p>代码分析支持 Eslint 分析，并支持用户自由扩展配置。</p><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h2><p>目前 TCA-Eslint 的适用场景很广，灵活扩展：</p><ul><li>JavaScript</li><li>TypeScript</li><li>React</li><li>Vue</li><li>Google 代码规范分析</li><li>其他，包括项目自己维护的 Eslint 配置</li></ul><h2 id="快速接入" tabindex="-1"><a class="header-anchor" href="#快速接入" aria-hidden="true">#</a> 快速接入</h2><p>以下是接入步骤：</p><ol><li>在代码分析创建项目，会自动匹配 JavaScript 或者 TypeScript 对应的推荐规则集</li><li>启动分析即可</li></ol><h2 id="高级配置" tabindex="-1"><a class="header-anchor" href="#高级配置" aria-hidden="true">#</a> 高级配置</h2><h3 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念" aria-hidden="true">#</a> 基础概念</h3><p>在进行高级配置之前，这里先普及下代码分析这边的基础概念——Eslint 类型。 由于 JavaScript 语法、 Vue 语法和 TypeScript 语法之间的区别，三者使用的语法解析器也是不一样的，这里基于其使用的语法解析器的不同，从 Eslint 中拆分出来了 Eslint_vue 和 Eslint_typescript 工具。可以根据需要选择对应工具下的规则进行分析。而配置也会基于类型的不同匹配到对应的工具中。 目前代码分析上 Eslint 类型有：</p><ul><li>JAVASCRIPT 分析 JavaScript 以及基于 JavaScript 写的 React 代码，默认分析文件后缀名为.js,.jsx</li><li>VUE 分析 Vue 框架的代码，默认分析文件后缀名为.vue</li><li>TYPESCRIPT 分析 TypeScript 以及基于 TypeScript 写的 React 代码，默认分析文件后缀名为.ts,tsx</li></ul><h3 id="设置-globals" tabindex="-1"><a class="header-anchor" href="#设置-globals" aria-hidden="true">#</a> 设置 Globals</h3><p>因为项目会用到各式各样的框架，其中会有全局变量是 Eslint 无法识别到的，比如 <code>_</code> 或者 jtest，从而导致分析出不少误报。这里支持使用下面环境变量设置这些全局变量，减少误报。可以在代码分析项目中设置对应的环境变量。</p><table><thead><tr><th style="text-align:left;">环境变量名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">ESLINT_JAVASCRIPT_GLOBALS</td><td style="text-align:left;">字符串，以分号分割</td></tr><tr><td style="text-align:left;">ESLINT_VUE_GLOBALS</td><td style="text-align:left;">字符串，以分号分割</td></tr><tr><td style="text-align:left;">ESLINT_TYPESCRIPT_GLOBALS</td><td style="text-align:left;">字符串，以分号分割</td></tr></tbody></table><p>比如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ESLINT_JAVASCRIPT_GLOBALS=_:readonly;jtest:readonly
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，</p><ul><li>writable 表示允许重写变量</li><li>readonly 表示不允许重写变量</li><li>off 表示禁用该全局变量</li></ul><h3 id="指定参数配置文件" tabindex="-1"><a class="header-anchor" href="#指定参数配置文件" aria-hidden="true">#</a> 指定参数配置文件</h3><p>代码分析执行 Eslint 分析，默认会使用 Alloy Team 的 Eslint 配置来分析，但是也支持修改配置。</p><ol><li>在代码库中创建一个参数配置 Json 文件，结果类似 Eslint 的 Json 配置文件</li><li>在代码分析项目设置下面对应环境变量，指向这个参数配置文件 指定了参数配置文件之后，Eslint 分析时候就会自动将代码分析默认的配置与该参数配置文件进行合并。</li><li>启动全量分析即可</li></ol><table><thead><tr><th style="text-align:left;">环境变量名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">ESLINT_JAVASCRIPT_OPTIONS</td><td style="text-align:left;">字符串，相对代码库根目录路径</td></tr><tr><td style="text-align:left;">ESLINT_VUE_OPTIONS</td><td style="text-align:left;">字符串，相对代码库根目录路径</td></tr><tr><td style="text-align:left;">ESLINT_TYPESCRIPT_OPTIONS</td><td style="text-align:left;">字符串，相对代码库根目录路径</td></tr></tbody></table><h3 id="指定-eslint-配置文件" tabindex="-1"><a class="header-anchor" href="#指定-eslint-配置文件" aria-hidden="true">#</a> 指定 Eslint 配置文件</h3><p>代码分析也支持用户指定自己维护的 Eslint 配置文件进行分析。</p><table><thead><tr><th style="text-align:left;">环境变量名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">ESLINT_JAVASCRIPT_CONFIG</td><td style="text-align:left;">字符串，相对代码库根目录路径</td></tr><tr><td style="text-align:left;">ESLINT_VUE_CONFIG</td><td style="text-align:left;">字符串，相对代码库根目录路径</td></tr><tr><td style="text-align:left;">ESLINT_TYPESCRIPT_CONFIG</td><td style="text-align:left;">字符串，相对代码库根目录路径</td></tr></tbody></table><h3 id="设置配置类型" tabindex="-1"><a class="header-anchor" href="#设置配置类型" aria-hidden="true">#</a> 设置配置类型</h3><p>代码分析自带支持 Google 代码规范，可以在代码分析项目设置对应环境变量，使用对应的配置文件。</p><table><thead><tr><th style="text-align:left;">环境变量名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">ESLINT_JAVASCRIPT_CONFIG_TYPE</td><td style="text-align:left;">字符串, google,default,custom</td></tr><tr><td style="text-align:left;">ESLINT_VUE_CONFIG_TYPE</td><td style="text-align:left;">字符串, 可选：default,custom</td></tr><tr><td style="text-align:left;">ESLINT_TYPESCRIPT_CONFIG_TYPE</td><td style="text-align:left;">字符串, 可选：default,custom</td></tr></tbody></table><p>其中：</p><ul><li>google，表示使用 google 代码规范配置文件</li><li>default，表示使用代码分析维护的配置文件</li><li>custom，表示使用项目代码库中 Eslint 配置文件</li></ul><h3 id="配置优先顺序" tabindex="-1"><a class="header-anchor" href="#配置优先顺序" aria-hidden="true">#</a> 配置优先顺序</h3><p>这里介绍 TCA-Eslint 的配置使用顺序：</p><ol><li>优先检查是否设置对应的 ESLINT_CONFIG 环境变量，比如 ESLINT_JAVASCRIPT_CONFIG</li><li>然后检查是否设置对应的 ESLINT_CONFIG_TYPE 环境变量，比如 ESLINT_JAVASCRIPT_CONFIG_TYPE</li><li>若是 JAVASCRIPT 类型的项目，会自动检测代码库根目录下是否有 ESLINT 配置文件，若有则使用该配置文件进行分析，其他类型的项目便不会有这一步</li><li>使用代码分析维护的 Alloy Team 的配置文件进行分析</li></ol><h3 id="分析路径配置" tabindex="-1"><a class="header-anchor" href="#分析路径配置" aria-hidden="true">#</a> 分析路径配置</h3><p>可以在代码分析页面上设置分析路径设置，这里建议多使用 Exclude 设置，因为 Eslint 工具本身对 include 支持不友好。</p><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q&amp;A</h2><p>Q：JavaScript 内存溢出</p><p>A：Eslint 执行可能会出现 Js 内存溢出，以下有三种方案可以解决：</p><ul><li>可以设置环境变量 NODE_OPTIONS，比如</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>NODE_OPTIONS=&quot;--max-old-space-size=4096&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>设置环境变量 ESLINT_MAX_OLD_SPACE_SIZE，比如</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ESLINT_MAX_OLD_SPACE_SIZE=4096
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>设置分析路径过滤，将无用的文件进行过滤</li></ul><p>Q：一个配置同时分析 JS 和 TS</p><p>A：若代码库中既有 JavaScript 代码，又有 TypeScript 代码，并且共用一个配置文件。 若规则集中既有 Eslint 规则又有 Eslint_typescript 规则，为了避免执行两次 Eslint 以及可能出现重复单的情况，并且因为 Eslint_typescript 的语法解析器也能够解析 JavaScript 代码，所以这里将这样的项目当作 TypeScript 项目。</p><ol><li>这里建议只指定 ESLINT_TYPESCRIPT_CONFIG 环境变量</li><li>规则集中剔除 Eslint 的规则，只保留 Eslint_typescript 规则。</li><li>并指定 ESLINT_TYPESCRIPT_EXT=.js,.jsx,.ts,.tsx</li></ol><p>Q：找不到依赖</p><p>A：用户自己配置的配置文件中，可能会用到代码分析没有管理到的规则插件，导致分析时候找不到对应的依赖，这里有两个方案提供解决：</p><ul><li>在代码库根目录下 npm 安装对应插件，并设置分析路径过滤 node_modules</li></ul><p>Q：custom 与指定配置文件的区别</p><p>A：- custom 模式，会检测代码库中的 Eslint 配置文件进行分析，包括子目录和代码注释中设置的配置，都是可以生效的。</p><ul><li>相对的，指定配置文件的方式，只会对指定的配置文件中的配置会生效。</li></ul>`,53),s=[d];function n(r,h){return e(),l("div",null,s)}const o=t(a,[["render",n],["__file","eslint.html.vue"]]);export{o as default};
